<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ci on 1000g</title>
    <link>http://1000k.github.io/categories/ci/</link>
    <description>Recent content in Ci on 1000g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 27 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://1000k.github.io/categories/ci/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sublime Text 2 で CakePHP2 の CodeSniffer ルールを適用する</title>
      <link>http://1000k.github.io/2015/01/27/validate-cakephp2-rules-with-sublime-text2-phpcs-plugin/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2015/01/27/validate-cakephp2-rules-with-sublime-text2-phpcs-plugin/</guid>
      <description>

&lt;p&gt;Sublime Text 2 のエディタ上で PHP CodeSniffer を使い、コーディング規約をチェックする方法です。&lt;a href=&#34;http://benmatselby.github.io/sublime-phpcs/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://benmatselby.github.io/sublime-phpcs/&#39;, &#39;sublime-phpcs&#39;]);&#34; &gt;sublime-phpcs&lt;/a&gt; プラグインを導入することで、コーディング規約違反のある行がエディタ上に表示されるようになります。&lt;/p&gt;

&lt;p&gt;なお、プラグインの公式ページでは phpmd も一緒に導入していますが、&lt;a href=&#34;http://blog.1000k.net/2013/11/26/phpmd-%e3%81%ae%e9%a0%ad%e3%81%8c%e3%81%8b%e3%81%aa%e3%82%8a-messy/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/2013/11/26/phpmd-%e3%81%ae%e9%a0%ad%e3%81%8c%e3%81%8b%e3%81%aa%e3%82%8a-messy/&#39;, &#39;PHPMD はヒステリックすぎて個人的にお勧めしない&#39;]);&#34; &gt;PHPMD はヒステリックすぎて個人的にお勧めしない&lt;/a&gt; ので省略します。&lt;/p&gt;

&lt;h2 id=&#34;チュートリアル:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;チュートリアル&lt;/h2&gt;

&lt;h3 id=&#34;codesniffer-をインストールする:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;CodeSniffer をインストールする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pear install PHP_CodeSniffer
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cakephp-のルールセットをインストールする:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;CakePHP のルールセットをインストールする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pear channel-discover pear.cakephp.org
pear install cakephp/CakePHP_CodeSniffer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CodeSniffer のルールセットに追加されているか以下のコマンドで確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpcs -i
The installed coding standards are CakePHP, MySource, PEAR, PHPCS, PSR1, PSR2, Squiz and Zend
(CakePHP が含まれていれば OK)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sublime-text-2-に-codesniffer-プラグインをインストールする:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;Sublime Text 2 に CodeSniffer プラグインをインストールする&lt;/h3&gt;

&lt;p&gt;&amp;#8220;Package Control: Install Package&amp;#8221; で &lt;code&gt;Phpcs&lt;/code&gt; をインストールするだけ。&lt;/p&gt;

&lt;p&gt;(Package Control 自体のインストール方法は &lt;a href=&#34;https://sublime.wbond.net/installation#st2&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://sublime.wbond.net/installation#st2&#39;, &#39;Installation &amp;#8211; Package Control&#39;]);&#34; &gt;Installation &amp;#8211; Package Control&lt;/a&gt; を参照)&lt;/p&gt;

&lt;h3 id=&#34;sublime-text-の設定:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;Sublime Text の設定&lt;/h3&gt;

&lt;p&gt;&amp;#8220;Preferences &amp;gt; Package Settings &amp;gt; PHP Code Sniffer &amp;gt; Settings &amp;#8211; User&amp;#8221; を開き、以下のキーを設定する必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;phpcs_php_path&lt;/li&gt;
&lt;li&gt;phpcs_executable_path&lt;/li&gt;
&lt;li&gt;php_cs_fixer_executable_path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;記入例:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;phpcs_php_path&amp;quot;: &amp;quot;C:\xampp\php\phpcs&amp;quot;,
    &amp;quot;phpcs_executable_path&amp;quot;: &amp;quot;C:\xampp\php\phpcs.bat&amp;quot;,
    &amp;quot;phpcs_additional_args&amp;quot;: {
        &amp;quot;--standard&amp;quot;: &amp;quot;CakePHP&amp;quot;
    },
    &amp;quot;php_cs_fixer_executable_path&amp;quot;: &amp;quot;C:Users{ユーザー名}AppDataRoamingComposervendorbin&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;windows-のみ-phpcs-py-を修正する:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;(Windows のみ) phpcs.py を修正する&lt;/h3&gt;

&lt;p&gt;Windows では、このまま phpcs が実行しても何も結果が表示されません。&lt;/p&gt;

&lt;p&gt;(&lt;code&gt;Ctrl + @&lt;/code&gt; でコンソールを開くと &lt;code&gt;[Windows Error]&lt;/code&gt; と出て途中で止まっている)&lt;/p&gt;

&lt;p&gt;以下の手順でプラグインのコードを修正してください。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;#8220;Preferences &amp;gt; Browse Packages&amp;#8230;&amp;#8221; でパッケージディレクトリを開く。&lt;/li&gt;
&lt;li&gt;&amp;#8220;Phpcs &amp;gt; phpcs.py&amp;#8221; を開く。&lt;/li&gt;
&lt;li&gt;169行目を以下のように修正 (パラメータに &lt;code&gt;shell=True&lt;/code&gt; を追加) する。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;# proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, startupinfo=info, cwd=home)
proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, startupinfo=info, cwd=home, shell=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プラグインを実行する:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;プラグインを実行する&lt;/h3&gt;

&lt;p&gt;PHP ファイルを開いたタブで &lt;code&gt;Ctrl + P &amp;gt; PHP Code Sniffer: Sniff This File&lt;/code&gt; とタイプすれば、コーディング規約違反を検知してくれます。&lt;/p&gt;

&lt;p&gt;これでコーディングルール違反でチームメイトにディスられるリスクを回避できるようになりました。&lt;/p&gt;

&lt;h2 id=&#34;オプション:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;オプション&lt;/h2&gt;

&lt;h3 id=&#34;保存時に-sniff-されるのを止める:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;保存時に Sniff されるのを止める&lt;/h3&gt;

&lt;p&gt;プラグインインストール後のデフォルトだと、保存するたびに規約違反がサジェストされます。&lt;/p&gt;

&lt;p&gt;鬱陶しい場合は &amp;#8220;Preferences &amp;gt; Package Settings &amp;gt; PHP Code Sniffer &amp;gt; Settings &amp;#8211; User&amp;#8221; に下記を追加することでオフにできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;phpcs_execute_on_save&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:0e3f1a6b553d4169127746e6faedbbcf&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://benmatselby.github.io/sublime-phpcs/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://benmatselby.github.io/sublime-phpcs/&#39;, &#39;sublime-phpcs&#39;]);&#34; &gt;sublime-phpcs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/10585274/custom-ruleset-for-phpcs-using-phpstorm&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://stackoverflow.com/questions/10585274/custom-ruleset-for-phpcs-using-phpstorm&#39;, &#39;php &amp;#8211; Custom ruleset for phpcs using PHPStorm &amp;#8211; Stack Overflow&#39;]);&#34; &gt;php &amp;#8211; Custom ruleset for phpcs using PHPStorm &amp;#8211; Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cakephp/cakephp-codesniffer&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://github.com/cakephp/cakephp-codesniffer&#39;, &#39;cakephp/cakephp-codesniffer · GitHub&#39;]);&#34; &gt;cakephp/cakephp-codesniffer · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fabpot/PHP-CS-Fixer&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://github.com/fabpot/PHP-CS-Fixer&#39;, &#39;fabpot/PHP-CS-Fixer · GitHub&#39;]);&#34; &gt;fabpot/PHP-CS-Fixer · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matsu-chara.hatenablog.com/entry/2013/12/27/125026&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://matsu-chara.hatenablog.com/entry/2013/12/27/125026&#39;, &#39;sublime-phpcsでPSR-2準拠のコーディング &amp;#8211; だいたいよくわからないブログ( ´_ゝ`)&#39;]);&#34; &gt;sublime-phpcsでPSR-2準拠のコーディング &amp;#8211; だいたいよくわからないブログ( ´_ゝ`)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>jenkins ユーザーが ant を実行できないときの対処法</title>
      <link>http://1000k.github.io/2013/07/02/jenkins-user-cannot-run-ant/</link>
      <pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/07/02/jenkins-user-cannot-run-ant/</guid>
      <description>

&lt;p&gt;CentOS 6.3 にて、&lt;a href=&#34;http://jenkins-php.org/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://jenkins-php.org/&#39;, &#39;Template for Jenkins Jobs for PHP Projects&#39;]);&#34; &gt;Template for Jenkins Jobs for PHP Projects&lt;/a&gt; にある ant タスク (build.xml) 通りに PHPUnit タスクを実行しようとしたら、エラーが出てしまいました。&lt;/p&gt;

&lt;p&gt;かなり長時間ハマったのでメモを残しておきます。&lt;/p&gt;

&lt;h2 id=&#34;症状:135291858de89f6329950b22fca515d3&#34;&gt;症状&lt;/h2&gt;

&lt;p&gt;CentOS 6.3 にて、&lt;a href=&#34;http://jenkins-php.org/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://jenkins-php.org/&#39;, &#39;Template for Jenkins Jobs for PHP Projects&#39;]);&#34; &gt;Template for Jenkins Jobs for PHP Projects&lt;/a&gt; にある以下のタスクを実行するとエラーが出ました。&lt;code&gt;
 &amp;lt;target name=&amp;quot;phpunit&amp;quot; description=&amp;quot;Run unit tests using PHPUnit and generates junit.xml and clover.xml&amp;quot;&amp;gt; &amp;lt;exec executable=&amp;quot;phpunit&amp;quot; failonerror=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/target&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;エラーメッセージ:&lt;code&gt;
 # sudo -u jenkins ant ... phpunit: BUILD FAILED /var/lib/jenkins/jobs/mojamoja-unit-testing/workspace/build.xml:22: Execute failed: java.io.IOException: Cannot run program &amp;quot;phpunit&amp;quot;: error=2, No such file or directory Total time: 0 seconds&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;原因:135291858de89f6329950b22fca515d3&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;どうやら phpunit へのパスが通っていないようです。&lt;/p&gt;

&lt;p&gt;phpunit の実体は &lt;code&gt;/usr/local/bin/phpunit&lt;/code&gt; なのですが、jenkins ユーザーがこの PATH を参照できていない模様。&lt;/p&gt;

&lt;h2 id=&#34;試行錯誤:135291858de89f6329950b22fca515d3&#34;&gt;試行錯誤&lt;/h2&gt;

&lt;p&gt;まず、jenkins ユーザーの &lt;code&gt;~/.bash_profile&lt;/code&gt; と &lt;code&gt;~/.bashrc&lt;/code&gt; を以下の内容で作成してもダメでした。PATH は反映されません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
export PATH=$PATH:/usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、下記のように ant タスク内で PATH を変更するシェルを走らせてもダメでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;target name=&amp;quot;setenv&amp;quot;&amp;gt;
   &amp;amp;lt;exec executable=&amp;quot;/bin/sh&amp;quot;&amp;gt;
     &amp;amp;lt;arg line=&amp;quot;./setenv.sh&amp;quot;/&amp;gt;
   &amp;amp;lt;/exec&amp;gt;
 &amp;amp;lt;/target&amp;gt;

 &amp;amp;lt;target name=&amp;quot;env&amp;quot;&amp;gt;&amp;amp;lt;exec executable=&amp;quot;env&amp;quot; /&amp;gt;&amp;amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;setenv.sh の中身は下記。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
export PATH=${PATH}:/usr/local/bin
echo $PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで ant を実行すると、&lt;code&gt;setenv&lt;/code&gt; タスクの時点では PATH は変更されていますが、次に実行される &lt;code&gt;env&lt;/code&gt; タスクで元に戻ってしまっています。まるで setenv と env が別々のプロセスで動いているように見えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Buildfile: build.xml

setenv:
     [exec] /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin

env:
     [exec] HOSTNAME=mojamoja
     [exec] SHELL=/bin/bash
     [exec] TERM=xterm
     [exec] HISTSIZE=1000
     [exec] USER=jenkins
     ...
     [exec] PATH=/sbin:/bin:/usr/sbin:/usr/bin      &amp;amp;lt;- /usr/local/bin が追加されていない
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とういわけで、setenv で環境変数をセットする方法はボツでした。&lt;/p&gt;

&lt;h2 id=&#34;解決方法:135291858de89f6329950b22fca515d3&#34;&gt;解決方法&lt;/h2&gt;

&lt;h3 id=&#34;1-jenkins-のグローバルプロパティを設定する:135291858de89f6329950b22fca515d3&#34;&gt;1. Jenkins のグローバルプロパティを設定する&lt;/h3&gt;

&lt;p&gt;Jenkins から環境変数を上書きすることで、PATH を追加することができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Jenkinsの管理 &amp;gt; システムの設定 &amp;gt; グローバルプロパティ &amp;gt; 環境変数&lt;/code&gt; にて、以下のように設定します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/wp-content/uploads/jenkins_global_property.png&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/wp-content/uploads/jenkins_global_property.png&#39;, &#39;&#39;]);&#34; &gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/jenkins_global_property-300x191.png&#34; alt=&#34;Jenkins グローバルプロパティ&#34; width=&#34;300&#34; height=&#34;191&#34; class=&#34;alignnone size-medium wp-image-1507&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;キー: &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;値: &lt;code&gt;${PATH}:/usr/local/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただし、この方法だと Jenkins から Ant を実行した時しか PATH は上書きされません。&lt;/p&gt;

&lt;h3 id=&#34;2-sudoers-の-secure-path-を無効にする:135291858de89f6329950b22fca515d3&#34;&gt;2. sudoers の secure_path を無効にする&lt;/h3&gt;

&lt;p&gt;Fedora 系では sudo ユーザー向けの PATH が &lt;code&gt;/sbin:/bin:/usr/sbin:/usr/bin&lt;/code&gt; のみに制限されているので、これを外してやります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;visudo&lt;/code&gt; コマンドを実行して、以下のように書き直します。&lt;code&gt;
 # secure\_path をコメントアウト # Defaults secure\_path = /sbin:/bin:/usr/sbin:/usr/bin # env\_keep に PATH を追加 Defaults env\_keep += &amp;quot;PATH&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これで secure_path の縛りが解除されました。&lt;/p&gt;

&lt;p&gt;sudoers の環境変数は `sudo -l` で確認できます。&lt;code&gt;
 # sudo -l Matching Defaults entries for root on this host: !visiblepw, always\_set\_home, env\_reset, env\_keep=&amp;quot;COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS\_COLORS&amp;quot;, env\_keep+=&amp;quot;MAIL PS1 PS2 QTDIR USERNAME LANG LC\_ADDRESS LC\_CTYPE&amp;quot;, env\_keep+=&amp;quot;LC\_COLLATE LC\_IDENTIFICATION LC\_MEASUREMENT LC\_MESSAGES&amp;quot;, env\_keep+=&amp;quot;LC\_MONETARY LC\_NAME LC\_NUMERIC LC\_PAPER LC\_TELEPHONE&amp;quot;, env\_keep+=&amp;quot;LC\_TIME LC\_ALL LANGUAGE LINGUAS \_XKB\_CHARSET XAUTHORITY&amp;quot;, env_keep+=PATH User root may run the following commands on this host: (ALL) ALL&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:135291858de89f6329950b22fca515d3&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deginzabi163.wordpress.com/2011/04/23/%E8%A6%9A%E6%9B%B8fedora-14%E3%81%AEsudo%E3%81%8Cpath%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E6%BD%B0%E3%81%99%E3%81%AE%E3%81%8C%E9%AC%B1%E9%99%B6%E3%81%97%E3%81%84%EF%BC%86%E5%AF%BE%E7%AD%96/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://deginzabi163.wordpress.com/2011/04/23/%E8%A6%9A%E6%9B%B8fedora-14%E3%81%AEsudo%E3%81%8Cpath%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E6%BD%B0%E3%81%99%E3%81%AE%E3%81%8C%E9%AC%B1%E9%99%B6%E3%81%97%E3%81%84%EF%BC%86%E5%AF%BE%E7%AD%96/&#39;, &#39;[覚書]Fedora 14のsudoでPATHがアレで鬱陶しい＆対策 | Deginzabi163\&#39;s Blog&#39;]);&#34; &gt;[覚書]Fedora 14のsudoでPATHがアレで鬱陶しい＆対策 | Deginzabi163&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fishrimper.blogspot.jp/2012/12/sudo-path.html&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://fishrimper.blogspot.jp/2012/12/sudo-path.html&#39;, &#39;IT とかその他もろもろ: sudo した時の PATH&#39;]);&#34; &gt;IT とかその他もろもろ: sudo した時の PATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/98686/passing-path-through-sudo&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://superuser.com/questions/98686/passing-path-through-sudo&#39;, &#39;linux - Passing PATH through sudo - Super User&#39;]);&#34; &gt;linux - Passing PATH through sudo - Super User&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins が古い Java JDK を参照するせいで起動しなくなった</title>
      <link>http://1000k.github.io/2013/02/19/jenkins-cannot-run-because-of-refering-old-java-jdk/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/02/19/jenkins-cannot-run-because-of-refering-old-java-jdk/</guid>
      <description>

&lt;p&gt;CentOS 5.2 で発生した不具合。Jenkins を最新版 (1.502)にアップデートしたら起動できなくなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# service jenkins start
Starting Jenkins Jenkins requires Java5 or later, but you are running 1.4.2 from /usr/lib/jvm/java-1.4.2-gcj-1.4.2.0/jre
java.lang.UnsupportedClassVersionError: 48.0
   at Main.main(Main.java:90)
                                                           [  OK  ]
(OK と出るが起動せず)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JDK 1.6.0 がインストールされているにも関わらず、なぜか CentOS デフォルトの 1.4.2 を見に行っています。&lt;/p&gt;

&lt;p&gt;修正方法をメモしておきます。&lt;/p&gt;

&lt;p&gt;OS がどの JDK を参照しているのかは、 &lt;span class=&#34;lang:default decode:true crayon-inline&#34;&gt;update-alternatives &amp;#8211;display java&lt;/span&gt; コマンドで確認することができます。&lt;/p&gt;

&lt;p&gt;叩いてみると、やはり古い JDK を参照していました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# update-alternatives --display java

java -ステータスは自動です。
リンクは現在 /usr/lib/jvm/jre-1.4.2-gcj/bin/java を指しています。
/usr/lib/jvm/jre-1.4.2-gcj/bin/java - 優先項目 1420
 スレーブ jre: /usr/lib/jvm/jre-1.4.2-gcj
 スレーブ jre_exports: /usr/lib/jvm-exports/jre-1.4.2-gcj
 スレーブ keytool: /usr/lib/jvm/jre-1.4.2-gcj/bin/keytool
 スレーブ rmiregistry: /usr/lib/jvm/jre-1.4.2-gcj/bin/rmiregistry
現在の「最適」バージョンは /usr/lib/jvm/jre-1.4.2-gcj/bin/java です。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを最新版に切り替えたいのですが、私は手動で JDK 1.6.0 をインストールしたせいで、update-alternatives に認識されていませんでした。&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;lang:default decode:true crayon-inline&#34;&gt;&amp;#8211;config java&lt;/span&gt; オプションで確認してみると、JDK 1.4.2 しか表示されません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# update-alternatives --config java

1 プログラムがあり &#39;java&#39; を提供します。

  選択       コマンド
-----------------------------------------------
*+ 1           /usr/lib/jvm/jre-1.4.2-gcj/bin/java

Enter を押して現在の選択 [+] を保持するか、選択番号を入力します:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで、JDK 1.6.0_32 のパスを追加して、リンクを書きなおしてやります。&lt;/p&gt;

&lt;p&gt;以下のコマンドでリンクを追加することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# update-alternatives --install /usr/bin/java java /usr/java/jdk1.6.0_32/bin/java 16032
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでOKです。&lt;/p&gt;

&lt;p&gt;再び &lt;span class=&#34;lang:default decode:true crayon-inline&#34;&gt;update-alternatives &amp;#8211;config java&lt;/span&gt; コマンドでリンクの書き換えが成功してしていることを確かめられます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# update-alternatives --config java

2 プログラムがあり &#39;java&#39; を提供します。

  選択       コマンド
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.4.2-gcj/bin/java
*+ 2           /usr/java/jdk1.6.0_32/bin/java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で Jenkins が起動するようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# service jenkins start
Starting Jenkins                                           [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:ad0e5aaa074c415a1446b0cc67a27773&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/9527737/how-do-i-configure-starting-jdk-for-hudsonnow-jenkins&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://stackoverflow.com/questions/9527737/how-do-i-configure-starting-jdk-for-hudsonnow-jenkins&#39;, &#39;How do I configure starting jdk for hudson(now jenkins)? &amp;#8211; Stack Overflow&#39;]);&#34; &gt;How do I configure starting jdk for hudson(now jenkins)? &amp;#8211; Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.neofig.com/2011/03/11/update-alternatives%E3%81%A7%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%8C%81%E3%81%A4%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E5%88%87%E3%82%8A/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.neofig.com/2011/03/11/update-alternatives%E3%81%A7%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%8C%81%E3%81%A4%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E5%88%87%E3%82%8A/&#39;, &#39;update-alternativesで複数のバージョンを持つプログラムの切り替え | kyamamoto at blog.neofig.com&#39;]);&#34; &gt;update-alternativesで複数のバージョンを持つプログラムの切り替え | kyamamoto at blog.neofig.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://piggydb.jp/document-view.htm?id=597&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://piggydb.jp/document-view.htm?id=597&#39;, &#39;update-alternativesのグループにインストールしたJavaが追加されていないのかも&#39;]);&#34; &gt;update-alternativesのグループにインストールしたJavaが追加されていないのかも&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>XAMPP環境にJenkinsをインストールする</title>
      <link>http://1000k.github.io/2012/09/25/installing-jenkins-in-xampp-env/</link>
      <pubDate>Tue, 25 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2012/09/25/installing-jenkins-in-xampp-env/</guid>
      <description>

&lt;p&gt;XAMPPにはTomcatが同梱されているため、JenkinsのWARファイルをデプロイすれば、すぐにCI環境が構築できます。&lt;/p&gt;

&lt;p&gt;以下、&lt;a href=&#34;http://www.apachefriends.org/jp/xampp-windows.html&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.apachefriends.org/jp/xampp-windows.html&#39;, &#39;XAMPP for Windows 1.8.0&#39;]);&#34; title=&#34;apache friends - xampp for windows&#34;&gt;XAMPP for Windows 1.8.0&lt;/a&gt; を使ってJenkins環境を構築する手順を書きます。&lt;/p&gt;

&lt;h2 id=&#34;手順:a2b978718054ff7ee3bcbdd86b4ab357&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;jenkinsをダウンロードする:a2b978718054ff7ee3bcbdd86b4ab357&#34;&gt;Jenkinsをダウンロードする&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/wp-content/uploads/jenkins_homepage.png&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/wp-content/uploads/jenkins_homepage.png&#39;, &#39;&#39;]);&#34; &gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/jenkins_homepage.png&#34; alt=&#34;&#34; title=&#34;Jenkinsホームページ&#34; width=&#34;600&#34; height=&#34;553&#34; class=&#34;alignnone size-full wp-image-1096&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jenkins-ci.org/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://jenkins-ci.org/&#39;, &#39;Jenkinsのホームページ&#39;]);&#34; &gt;Jenkinsのホームページ&lt;/a&gt;から最新のwarアーカイブをダウンロードします。「Latest and greatest」をクリックして jenkins.war をダウンロードしてください。&lt;strong&gt;Windowsパッケージではない&lt;/strong&gt;ので注意してください。&lt;/p&gt;

&lt;h3 id=&#34;tomcatの管理者ユーザーを設定する:a2b978718054ff7ee3bcbdd86b4ab357&#34;&gt;Tomcatの管理者ユーザーを設定する&lt;/h3&gt;

&lt;p&gt;Tomcatを起動する前に、Tomcat管理画面に入るためのユーザーを作成します。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;C:\xampp\tomcat\conf\tomcat-users.xml&lt;/em&gt; を開いて、tomcat-usersブロック内に以下の2行を追加してください。&lt;/p&gt;

&lt;div&gt;
  [xml]&lt;br /&gt; &lt;tomcat-users&gt;&lt;br /&gt; &lt;role rolename=&#34;manager-gui&#34;/&gt;&lt;br /&gt; &lt;user username=&#34;tomcat&#34; password=&#34;s3cret&#34; roles=&#34;manager-gui&#34;/&gt;&lt;br /&gt; &lt;/tomcat-users&gt;&lt;br /&gt; [/xml]
&lt;/div&gt;

&lt;h3 id=&#34;tomcatを起動する:a2b978718054ff7ee3bcbdd86b4ab357&#34;&gt;Tomcatを起動する&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/wp-content/uploads/xampp_control_panel.png&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/wp-content/uploads/xampp_control_panel.png&#39;, &#39;&#39;]);&#34; &gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/xampp_control_panel.png&#34; alt=&#34;&#34; title=&#34;XAMPPコントロールパネル&#34; width=&#34;714&#34; height=&#34;450&#34; class=&#34;alignnone size-full wp-image-1086&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;XAMPPコントロールパネルを起動し、Tomcatの横にある「Start」ボタンをクリックするだけです。&lt;/p&gt;

&lt;p&gt;ボタンが「Stop」に変わった後 &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; にアクセスすれば、Tomcatのトップ画面が表示されます。&lt;/p&gt;

&lt;h3 id=&#34;管理画面にログインする:a2b978718054ff7ee3bcbdd86b4ab357&#34;&gt;管理画面にログインする&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/wp-content/uploads/tomcat_top.png&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/wp-content/uploads/tomcat_top.png&#39;, &#39;&#39;]);&#34; &gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/tomcat_top.png&#34; alt=&#34;&#34; title=&#34;Tomcatトップページ&#34; width=&#34;600&#34; height=&#34;433&#34; class=&#34;alignnone size-full wp-image-1087&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「Manage App」をクリックして管理画面にログインします。認証パスワードは先ほど設定した通り、ユーザー名が「_tomcat_」、パスワードが「_s3cret_」となります。&lt;/p&gt;

&lt;h3 id=&#34;warファイルをデプロイする:a2b978718054ff7ee3bcbdd86b4ab357&#34;&gt;warファイルをデプロイする&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/wp-content/uploads/tomcat_manage.png&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/wp-content/uploads/tomcat_manage.png&#39;, &#39;&#39;]);&#34; &gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/tomcat_manage.png&#34; alt=&#34;&#34; title=&#34;Tomcatデプロイ&#34; width=&#34;600&#34; height=&#34;174&#34; class=&#34;alignnone size-full wp-image-1088&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「warファイルの配備」に先ほどダウンロードした jenkins.war を指定し、「配備」をクリックします。&lt;/p&gt;

&lt;h3 id=&#34;jenkinsの画面を確認する:a2b978718054ff7ee3bcbdd86b4ab357&#34;&gt;Jenkinsの画面を確認する&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/wp-content/uploads/jenkins_dashboard.png&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/wp-content/uploads/jenkins_dashboard.png&#39;, &#39;&#39;]);&#34; &gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/jenkins_dashboard.png&#34; alt=&#34;&#34; title=&#34;Jenkinsダッシュボード&#34; width=&#34;600&#34; height=&#34;271&#34; class=&#34;alignnone size-full wp-image-1090&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上で完了です。&lt;a href=&#34;http://localhost:8080/jenkins/&#34;&gt;http://localhost:8080/jenkins/&lt;/a&gt; にアクセスすれば Jenkins のトップ画面が表示されます。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>