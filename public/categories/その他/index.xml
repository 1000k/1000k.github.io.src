<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>その他 on 1000g</title>
    <link>http://1000k.github.io/categories/%E3%81%9D%E3%81%AE%E4%BB%96/</link>
    <description>Recent content in その他 on 1000g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 25 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://1000k.github.io/categories/%E3%81%9D%E3%81%AE%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>手に負えないシステムをどうにかするシナリオ</title>
      <link>http://1000k.github.io/2014/01/25/way-to-handle-system-which-more-than-you-can-handle/</link>
      <pubDate>Sat, 25 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2014/01/25/way-to-handle-system-which-more-than-you-can-handle/</guid>
      <description>

&lt;p&gt;システムは時間の経過と共に複雑化します。常にシンプルさを保つ仕組みが無ければ変更の容易性は減少し、最終的には変更不能に陥ります。&lt;/p&gt;

&lt;p&gt;この記事では、システムが複雑になる原因と、その対処シナリオを考察します。&lt;/p&gt;

&lt;h2 id=&#34;時間と複雑性の関係:194584669bba4a67d0a447ada7873d53&#34;&gt;時間と複雑性の関係&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/complexity_by_time.png&#34; alt=&#34;複雑性と時間&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上はよく見かける時間と複雑性のモデルです。初回リリース時点では低かった複雑性も、その後の度重なる変更を経て、指数関数的に複雑性が上昇します。下げる努力をしなければ、1回の変更に要する労力は増え続け、最終的には変更不能に陥ります。&lt;/p&gt;

&lt;p&gt;「運用しやすく作る」という原則は、システム開発に関わる人なら全員知っています。しかし、それを実現するためのマインドセットやプラクティスを実践している人は極めて少ないように感じます。&lt;/p&gt;

&lt;h2 id=&#34;放っておけば複雑性は増加する:194584669bba4a67d0a447ada7873d53&#34;&gt;放っておけば複雑性は増加する&lt;/h2&gt;

&lt;p&gt;システムを作ったまま完全に放置すれば複雑性は上昇しないかもしれませんが、現実にはそんなケースはありえないでしょう。次のような変更は必ず起きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ミドルウェアのバージョンアップ&lt;/li&gt;
&lt;li&gt;インフラの変更 (ネットワーク構成、クラウド化等)&lt;/li&gt;
&lt;li&gt;連携先システムの仕様変更&lt;/li&gt;
&lt;li&gt;バグの発見による修正&lt;/li&gt;
&lt;li&gt;組織内ルールの変更 (セキュリティポリシーや運用ルール等)&lt;/li&gt;
&lt;li&gt;機能追加要望&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常に複雑性を低く保ち、変更可能な状態にしておかなければ、こうしたイベントが起きるたびに大きなコストと苦痛が生じます。&lt;/p&gt;

&lt;h2 id=&#34;どうにかする-のパターン:194584669bba4a67d0a447ada7873d53&#34;&gt;「どうにかする」のパターン&lt;/h2&gt;

&lt;p&gt;手に負えないシステムの面倒を見ることになってしまったらどうすればいいでしょうか？ここでは以下の4つシナリオを考えてみます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;耐え続ける&lt;/li&gt;
&lt;li&gt;捨てる&lt;/li&gt;
&lt;li&gt;変更可能になるよう直す&lt;/li&gt;
&lt;li&gt;逃げる&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;耐え続ける:194584669bba4a67d0a447ada7873d53&#34;&gt;耐え続ける&lt;/h3&gt;

&lt;p&gt;どんな変更イベントが発生しても力づくで何とかすることです。あなたが無限の体力と折れない心の持ち主ならば、このシナリオが有効でしょう。&lt;/p&gt;

&lt;p&gt;リスクとしては、このパターンだと変更を重ねるごとに苦痛が増え続けます。また、レガシーなままのシステムをレガシーな技術で運用し続けることは、あなたの技術レベルを向上させません。市場価値は相対的に下がっていくでしょう。&lt;/p&gt;

&lt;p&gt;…避けた方がいいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;捨てる:194584669bba4a67d0a447ada7873d53&#34;&gt;捨てる&lt;/h3&gt;

&lt;p&gt;システムを捨てて、コスト発生源を根本から排除するシナリオです。以下のような場合に有効です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;システムを誰も使っていない (連携先が無い)&lt;/li&gt;
&lt;li&gt;関係者の許可が得られる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずい組織はこのアクションが全くとれません。KPI や ROI を評価すれば判断できるかもしれませんが、典型的なサイロ型組織 (経営/企画/運用/開発がそれぞれ分割されている) では複数部署にコスト分配などを行い、全体的なコストが見えづらくなっています。また、そのような組織では意思の決定自体が非常に難しいため、対処されないままになっていることが多いです。&lt;/p&gt;

&lt;p&gt;逆に言えば、廃棄するのに十分な根拠を用意でき、関係者全員と調整が可能ならば、このシナリオは非常に有効でしょう。これを可能にするためには日頃から以下のアクションを行っておく必要があります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;マトリクス (利益、コスト、リスクなど) を可視化する&lt;/li&gt;
&lt;li&gt;定期的にマトリクスを評価する&lt;/li&gt;
&lt;li&gt;関係者を把握し、説得可能な状態にする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(悪魔のささやき: わざと深刻な障害を発生させ、関係者全員に「このシステムは手に負えない」という印象を与えられたら…？おっと！)&lt;/p&gt;

&lt;h3 id=&#34;変更可能になるよう直す:194584669bba4a67d0a447ada7873d53&#34;&gt;変更可能になるよう直す&lt;/h3&gt;

&lt;p&gt;複雑性を下げ、少ないコストで変更可能な状態にするシナリオ。具体的には以下のアクションを行います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自動テストを導入する&lt;/li&gt;
&lt;li&gt;環境構築を自動化する&lt;/li&gt;
&lt;li&gt;不要なコンポーネントを削除してスリム化する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これについては私自身も経験があるので、別の記事で詳しく書く予定です。また、『&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4798116831/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4798116831&amp;linkCode=as2&amp;tag=1000k-22&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.amazon.co.jp/gp/product/4798116831/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4798116831&amp;linkCode=as2&amp;tag=1000k-22&#39;, &#39;レガシーコード改善ガイド&#39;]);&#34; &gt;レガシーコード改善ガイド&lt;/a&gt;』が素晴らしいアイディアを与えてくれるでしょう。&lt;/p&gt;

&lt;h3 id=&#34;逃げる:194584669bba4a67d0a447ada7873d53&#34;&gt;逃げる&lt;/h3&gt;

&lt;p&gt;巨大すぎて変更できず、協力者も得られず、考えうるアクションが全てダメだとわかれば、このシナリオが唯一の救いとなるでしょう。転職や部署変更で逃げましょう。&lt;/p&gt;

&lt;p&gt;私は過去に「耐え続ける」シナリオを採り続けてボロボロになった人を何人も見ています。組織に労働力を売っても、人生まで売り飛ばす必要はありません。ダメだとわかったら次に行きましょう。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:194584669bba4a67d0a447ada7873d53&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;アジャイルやリーンの手法を実践できていれば、複雑性に対処しやすいシステムを作れているでしょう。現状がそうでないならば、上述したアクションによって改善を行うといいでしょう。&lt;/p&gt;

&lt;p&gt;価値の無いシステムと関わり続けて市場価値を失い続けるのは賢明ではありません。命を大切に。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jutta Eckstein への質問</title>
      <link>http://1000k.github.io/2014/01/19/questions-to-jutta-eckstein/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2014/01/19/questions-to-jutta-eckstein/</guid>
      <description>

&lt;p&gt;Jutta Eckstein 氏の基調講演&lt;a href=&#34;http://blog.1000k.net/2014/01/18/sgt2014-%e5%9f%ba%e8%aa%bf%e8%ac%9b%e6%bc%942/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/2014/01/18/sgt2014-%e5%9f%ba%e8%aa%bf%e8%ac%9b%e6%bc%942/&#39;, &#39;「組織にアジリティを取り入れる – どうすればアジャイルになれる？」&#39;]);&#34; &gt;「組織にアジリティを取り入れる – どうすればアジャイルになれる？」&lt;/a&gt; の後に行われた質疑応答です。&lt;/p&gt;

&lt;h2 id=&#34;変化のために必要な3つのロールが揃わない場合は:a3e13834c7e6dd718e478ab87401cef7&#34;&gt;変化のために必要な3つのロールが揃わない場合は？&lt;/h2&gt;

&lt;p&gt;※3つのロール: プロジェクトリーダー、情熱のあるチェンジ・エージェント、アーキテクト / 技術リーダー&lt;/p&gt;

&lt;p&gt;Q: 変化のために必要な3つのロールが揃わない場合はどうすればいいか？掛け持ちしてもいい？現場では情熱のある人が技術リードを兼任していることも多い。&lt;/p&gt;

&lt;p&gt;A: 技術リードがいなければ組織は当然変化できない。しかし、ロールを兼任すると負担が大きすぎる。一人だけでも始めることは可能だが、仲間は必要。そういう仲間を見つけなければならない。&lt;/p&gt;

&lt;p&gt;なお、「(変化に費やす) 時間が無い」という声をよく耳にする。その場合、とにかくそういう状況を改善すること。「なぜ忙しいのか」を発見し、改善する。「時間がないからテストコードが書けない」なら、何らかのテストを自動で実行できるようにすればいい。&lt;/p&gt;

&lt;h2 id=&#34;どうすれば-離-に達することができる:a3e13834c7e6dd718e478ab87401cef7&#34;&gt;どうすれば「離」に達することができる？&lt;/h2&gt;

&lt;p&gt;Q: いつまで経っても守破離の「守」から抜け出せないケースが多い。アジャイルプラクティスを実施しているだけで「我々はアジャイルだ！」と思っている人が非常に多い。どうやってその段階を抜け出せるか？気づきを与えるにはどうすればいい？&lt;/p&gt;

&lt;p&gt;A: 確かにこれは非常に難しい。たとえば私は趣味のテニスにおいて「守」のレベルを抜け出せないが、プロじゃないので別にいいと思っている。ひょっとしたら周りの人たちも前に進みたいと思っていないのでは？質問してみるといい。&lt;/p&gt;

&lt;p&gt;変化のモデルにおける「アトラクタ」という要素がないか探してみる。次のレベルに行ってみたくなるような要素はないか聞いてみる。全員のふりかえりだけでなく、一対一で聞いてみるのも良い。&lt;/p&gt;

&lt;p&gt;Q: 本人が気づいていない問題を発見して提示してあげてもいい？&lt;/p&gt;

&lt;p&gt;A: 効果的かもしれない。ひょっとしたら (集団でのふりかえりでは話せないような) 個人的な問題が隠れている可能性がある。&lt;/p&gt;

&lt;h2 id=&#34;組織内の別の変化とアジャイル化が衝突していたらどうすればいい:a3e13834c7e6dd718e478ab87401cef7&#34;&gt;組織内の別の変化とアジャイル化が衝突していたらどうすればいい？&lt;/h2&gt;

&lt;p&gt;Q: 「現場では複数の変化が同時に起きていることもある」という話だったが、ある変化と別の変化が衝突するケースもある。例えば「品質が低いのはプロセスが未熟なせいだから、きっちりした監査を導入しよう」という変化と、アジャイルを求める変化は衝突している。この場合はどうすればいい？&lt;/p&gt;

&lt;p&gt;具体的に言うと、全社共通の品質管理チームのボスが指揮統制型で押しつけてくるので困っている。&lt;/p&gt;

&lt;p&gt;A: 大組織では確かにそういうことがある。早い段階でアジャイル開発のプロセスに参加してもらって、要望を聞いてみると良い。ユーザーストーリーを作る手助けをしてやったり、質問をしてみること。「なぜそのプロセスを適用する価値があるのか？ビジネス上の価値はあるのか？」と。また、その質問の意味を知ってもらう。もしボスの言い分が役に立つとわかれば、適用してもいいかもしれない。&lt;/p&gt;

&lt;p&gt;まずは要求を確立すること。本当は何が必要なのかを聞き出すと良い。&lt;/p&gt;

&lt;p&gt;重要なポイントは、チームがその人に対してどのような態度をとるべきかということ。彼は利害関係者である。これまでの議論のレビュー結果を示すなどして、話し合いを続ける。恐らく時間をかける必要があるだろう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SGT2014 基調講演2 「組織にアジリティを取り入れる – どうすればアジャイルになれる？」</title>
      <link>http://1000k.github.io/2014/01/18/sgt2014-keynote2/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2014/01/18/sgt2014-keynote2/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/jutta_eckstein-300x198.jpg&#34; alt=&#34;Jutta Eckstein&#34; width=&#34;300&#34; height=&#34;198&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/2014/01/17/sgt2014-%e5%9f%ba%e8%aa%bf%e8%ac%9b%e6%bc%94%e3%80%8c%e3%82%a8%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%97%e3%83%a9%e3%82%a4%e3%82%ba%e3%83%bb%e3%82%b9%e3%82%af%e3%83%a9%e3%83%a0-%e4%bc%81%e6%a5%ad%e6%b4%bb/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/2014/01/17/sgt2014-%e5%9f%ba%e8%aa%bf%e8%ac%9b%e6%bc%94%e3%80%8c%e3%82%a8%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%97%e3%83%a9%e3%82%a4%e3%82%ba%e3%83%bb%e3%82%b9%e3%82%af%e3%83%a9%e3%83%a0-%e4%bc%81%e6%a5%ad%e6%b4%bb/&#39;, &#39;1日目の基調講演&#39;]);&#34; &gt;1日目の基調講演&lt;/a&gt; に続き、2日目の基調講演もメモします。&lt;/p&gt;

&lt;p&gt;スピーカーの &lt;a href=&#34;http://www.jeckstein.com/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.jeckstein.com/&#39;, &#39;Jutta Eckstein 氏&#39;]);&#34; &gt;Jutta Eckstein 氏&lt;/a&gt;はもともと教師であり、その後 IT 業界に入って製品開発を通じてアジャイルプロセスを身につけました。今回の講義では、アジャイルを組織に導入する方法と変化のモデルについて、明晰な分析と的確なアドバイスをされていました。&lt;/p&gt;

&lt;h2 id=&#34;アジャイルを組織に導入するための2つの典型的なアプローチ:c795c54138722eda973de47e1a73c007&#34;&gt;アジャイルを組織に導入するための2つの典型的なアプローチ&lt;/h2&gt;

&lt;h3 id=&#34;ゲリラ型:c795c54138722eda973de47e1a73c007&#34;&gt;ゲリラ型&lt;/h3&gt;

&lt;p&gt;自分でこっそりプロジェクトをアジャイルプロセスで回す方法。成功した後に「実はアジャイルなやり方でした」とネタばらしすることで、実績と共に導入を促すことができる。(Mike Beedle が初めてスクラムを実践した時と同じ方法)&lt;/p&gt;

&lt;p&gt;このやり方は、マネジメント層が関与しないと成功しづらい。出来る限り顧客と PO を巻き込むようにしよう。&lt;/p&gt;

&lt;h3 id=&#34;最高司令型-supreme-command:c795c54138722eda973de47e1a73c007&#34;&gt;最高司令型 (Supreme Command)&lt;/h3&gt;

&lt;p&gt;組織上層部からトップダウンで「アジャイルをやろう」と命令して実施する方法。&lt;/p&gt;

&lt;p&gt;ボトムアップで広める場合と比べると、組織全体でオープンにやれるという点ではやりやすいが、一方で以下の難点もある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;役割、組織、構造が限定されてしまうことが多い。&lt;/li&gt;
&lt;li&gt;チーム自身がやり方を決めるわけでは無いので、自己組織化が難しい。アジャイルマインドと矛盾する。&lt;/li&gt;
&lt;li&gt;管理職が権力を発揮すると、開発者が考える透明性に対してケチが入りやすく、信頼が確立しづらい。&lt;/li&gt;
&lt;li&gt;開発のプラクティスを強制されることが多い。強制されたものは維持しづらい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いずれの場合でも、何よりまず全員が参加すること。特にふりかえり。&lt;/p&gt;

&lt;p&gt;アジャイルに移行すると変化が起きる。本当に変化するのは個人。&lt;/p&gt;

&lt;h2 id=&#34;変化のモデル:c795c54138722eda973de47e1a73c007&#34;&gt;変化のモデル&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mindtools.com/pages/article/newPPM_96.htm&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.mindtools.com/pages/article/newPPM_96.htm&#39;, &#39;Elisabeth Kübler-Ross モデル&#39;]);&#34; &gt;Elisabeth Kübler-Ross モデル&lt;/a&gt; と &lt;a href=&#34;http://stevenmsmith.com/ar-satir-change-model/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://stevenmsmith.com/ar-satir-change-model/&#39;, &#39;Virginia Satir モデル&#39;]);&#34; &gt;Virginia Satir モデル&lt;/a&gt; がある。後者は &lt;a href=&#34;http://www.amazon.co.jp/gp/product/462108786X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=462108786X&amp;linkCode=as2&amp;tag=1000k-22&amp;quot;&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.amazon.co.jp/gp/product/462108786X/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=462108786X&amp;linkCode=as2&amp;tag=1000k-22&amp;quot;&#39;, &#39;『Fearless Change アジャイルに効く アイデアを組織に広めるための48のパターン』&#39;]);&#34; &gt;『Fearless Change アジャイルに効く アイデアを組織に広めるための48のパターン』&lt;/a&gt; に素晴らしい解説がある。&lt;/p&gt;

&lt;h3 id=&#34;アジャイル導入直後に時間と共に起きること:c795c54138722eda973de47e1a73c007&#34;&gt;アジャイル導入直後に時間と共に起きること&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;まず混沌とする。多くの人は放棄したくなる。&lt;/li&gt;
&lt;li&gt;時間と共に「やっぱりあの考えは使えるんじゃないか」という別の見方ができるようになり、良さに気付く。&lt;/li&gt;
&lt;li&gt;うまくいけば、新しい考えが受け入れられ定着する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;なお、現場は常に変化しており、様々な変化のカーブが同時並行で存在していることも多い。同僚はアジャイル以外でも変化しているかもしれない。同僚がこのカーブのどこにいるか特定できれば、適切なサポートができるかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;痛みが変化をサポートする:c795c54138722eda973de47e1a73c007&#34;&gt;痛みが変化をサポートする&lt;/h3&gt;

&lt;p&gt;痛みがある現場 (＝不満があちこちにある職場) の方が変化を受け入れやすい。「もっと良いやり方があれば試したい」と思っているから。しかし、実際にやってみると誰も変化を受け入れる体制が整っていないことも多い。&lt;/p&gt;

&lt;p&gt;また、「新しいやり方を導入すれば新しい問題が生じる。何も良くならない。変わらない。」と言う人も多い。&lt;/p&gt;

&lt;p&gt;懐疑的な人が多いのは良いことである。情熱的な人しかいない方が危ない。見落としを多くしたり、必要ないことや組織に害となる考え方もする可能性があるので。&lt;/p&gt;

&lt;p&gt;いずれにせよ変化を始めたら、人々が感じている恐れや希望などの様々なことをふりかえりで確認し、吸収しなければならない。&lt;/p&gt;

&lt;h2 id=&#34;パイロットプロジェクトの落とし穴:c795c54138722eda973de47e1a73c007&#34;&gt;パイロットプロジェクトの落とし穴&lt;/h2&gt;

&lt;p&gt;※パイロットプロジェクト＝試験的にプロジェクトをアジャイルでやること。&lt;/p&gt;

&lt;p&gt;本格的な導入の前に試しに実施されることが多いが、落とし穴がある。意欲のある優れた人材だけを集めたり、リスクの少ない簡単な案件で実施しても、「こんなベストな人材でこんな低リスクな案件なんだから、成功するのは当たり前だ」という評価に終わってしまうことが多い。&lt;/p&gt;

&lt;p&gt;したがってパイロットプロジェクトは、「普通の案件」で、「普通の人達」を、「普通のサイズ」で関与させた方が良い。&lt;/p&gt;

&lt;h2 id=&#34;アジャイル導入スケジュール:c795c54138722eda973de47e1a73c007&#34;&gt;アジャイル導入スケジュール&lt;/h2&gt;

&lt;p&gt;アジャイルを導入するためには以下のことを順序だってやると良い。&lt;/p&gt;

&lt;p&gt;この際、3つのロールが必要になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクトリーダー&lt;/li&gt;
&lt;li&gt;情熱のあるチェンジ・エージェント&lt;/li&gt;
&lt;li&gt;アーキテクト / 技術リーダー&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;意識付け:c795c54138722eda973de47e1a73c007&#34;&gt;意識付け&lt;/h3&gt;

&lt;p&gt;会話や読書を行い、アジャイルの進め方を伝播しておく。&lt;/p&gt;

&lt;h3 id=&#34;readiness-enabling-ワークショップ:c795c54138722eda973de47e1a73c007&#34;&gt;Readiness/Enabling ワークショップ&lt;/h3&gt;

&lt;p&gt;アジャイルを実施する際の困難や解決策を議論するワークショップ。以下のことを話し合う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;これまでにやったことは？&lt;/li&gt;
&lt;li&gt;簡単にできることは？&lt;/li&gt;
&lt;li&gt;適用が難しいことは？&lt;/li&gt;
&lt;li&gt;絶対に不可能なことは？ (会社や文化によってはできないこともある)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;難しいことが見つかれば、以下のことも議論する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;それを簡単にするにはどうすればいいか？&lt;/li&gt;
&lt;li&gt;それを変えることで良い効果を得られるか？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ふりかえり:c795c54138722eda973de47e1a73c007&#34;&gt;ふりかえり&lt;/h3&gt;

&lt;p&gt;プロジェクトで行う。どうやって変化を起こしてきたのかをふりかえり、将来について話し合う。具体的には次のような内容。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;うまくいったことを、どうやって次のプロジェクトに活かすか？&lt;/li&gt;
&lt;li&gt;何が障害になっていたか？何を変えたほうがいいのか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;継続的に学ぶことで、必然的にアジャイルになってくる。&lt;/p&gt;

&lt;p&gt;重要なのは、アジャイルを実施する人たちがふりかえりのオーナーとなること。外部のコーチがやり方を教えるだけでは意味が無い！現場の人たちが自己組織化し、自分たちで次に何をやるべきか決められるようにならなければならない。&lt;/p&gt;

&lt;p&gt;なお、「グッドプラクティスを集めても意味がない」と言う人がいるが、それは間違い。どこかの組織で成功したことにはヒントがある。&lt;/p&gt;

&lt;h2 id=&#34;学びのステップ-守破離:c795c54138722eda973de47e1a73c007&#34;&gt;学びのステップ: 守破離&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;守: 型を守る。学んだ通りのやり方をやってみる。&lt;/li&gt;
&lt;li&gt;破: ふりかえりによって、意味や目的や効果を確かめる。不必要な部分も見えるかもしれない。&lt;/li&gt;
&lt;li&gt;離: 独自の背景をベースにしたやり方ができるようになる。アジャイルになるためには、全員が「離」のやり方にならなければならない！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特定のレベルに達することができないと物事は変えられないかもしれない。アジャイルを本当に適用するためには、独自のアジャイル手法を考えなければならないかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;トレーニングをカスタマイズする:c795c54138722eda973de47e1a73c007&#34;&gt;トレーニングをカスタマイズする&lt;/h2&gt;

&lt;p&gt;サンドボックスで学んだやり方では、すぐに現場で実践に移せない。カスタマイズしたトレーニングを実施し、現場に則したやり方を習得したほうが早い。例えばデイリースクラムは、実際のプロジェクトですぐに実施して学べる。&lt;/p&gt;

&lt;h2 id=&#34;モニタリングとコーチング:c795c54138722eda973de47e1a73c007&#34;&gt;モニタリングとコーチング&lt;/h2&gt;

&lt;p&gt;アジャイル導入には、社内に高い情熱を持った人が必要。変化の過程では必ずアップダウンがあるため、ドライバーとなるチェンジ・エージェントがいるべき。彼には次のような素質が求められる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;困難を直視できる&lt;/li&gt;
&lt;li&gt;実践もサポートできる&lt;/li&gt;
&lt;li&gt;アジャイルの変化を深く信じている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、組織外部のサポート役 (メンター) がこの役割を担うことはできない。必ず内部に必要。&lt;/p&gt;

&lt;h2 id=&#34;変化を維持するためにやること:c795c54138722eda973de47e1a73c007&#34;&gt;変化を維持するためにやること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;社内にコーチを作る。&lt;/li&gt;
&lt;li&gt;新人をメンタリングする。&lt;/li&gt;
&lt;li&gt;成功したら（成果を上げたら）必ずお祝いをする。&lt;/li&gt;
&lt;li&gt;絶えず学び続ける。守破離の「離」のレベルに達すること！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ:c795c54138722eda973de47e1a73c007&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;変化は絶対にスムーズではない。カオスの中を通過する必要がある。&lt;/li&gt;
&lt;li&gt;ふりかえりは気づきを生み出す。継続的な進化につながる。&lt;/li&gt;
&lt;li&gt;ワークショップで全員に気付きを与えよう。&lt;/li&gt;
&lt;li&gt;カスタマイズしたトレーニングで実践力を与えよう。&lt;/li&gt;
&lt;li&gt;チェンジエージェントが全てをサポートする。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;質疑応答でも素晴らしい討議が行われていたので、別ページに書きました。↓&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/2014/01/19/jutta-eckstein-%e3%81%b8%e3%81%ae%e8%b3%aa%e5%95%8f/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/2014/01/19/jutta-eckstein-%e3%81%b8%e3%81%ae%e8%b3%aa%e5%95%8f/&#39;, &#39;Jutta Eckstein への質問&#39;]);&#34; &gt;Jutta Eckstein への質問&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mike Beedle への質問</title>
      <link>http://1000k.github.io/2014/01/17/questions-to-mike-beedle/</link>
      <pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2014/01/17/questions-to-mike-beedle/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.1000k.net/?p=1736&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/?p=1736&#39;, &#39;Mike Beedle の基調講演&#39;]);&#34; &gt;Mike Beedle の基調講演&lt;/a&gt;の後の質疑応答では、非常に興味深いディスカッションが行われました。&lt;/p&gt;

&lt;p&gt;幾つかのやりとりをメモします。&lt;/p&gt;

&lt;h2 id=&#34;q-スクラムは素晴らしい考え方だと思うが-弱点は何か:22e56902b6d51e44bdd3ca7927ccaaab&#34;&gt;Q: スクラムは素晴らしい考え方だと思うが、弱点は何か？&lt;/h2&gt;

&lt;p&gt;A: 文化。スクラムをやるためには文化を変えなければならない。誠実な企業体制となり、情報を共有できるようにならねばならない。それができる企業はあまりにも少ない。&lt;/p&gt;

&lt;p&gt;開発現場レベルでスクラムの導入に手こずっているなら、ビジネスレベルではもっと多くの障壁が待ち受けているだろう。これが最大の問題だ。&lt;/p&gt;

&lt;h2 id=&#34;q-文化を変えるには誰を説得すればいい:22e56902b6d51e44bdd3ca7927ccaaab&#34;&gt;Q: 文化を変えるには誰を説得すればいい？&lt;/h2&gt;

&lt;p&gt;A: 中間管理職。現場の人間ならスクラムをやるべきだというのはすぐに理解できるはず。中間管理職は現場や最先端に遅れを取ることをいつも恐れているので、スクラムを理解できないことは無いはずだ。&lt;/p&gt;

&lt;p&gt;ちなみに、ナレッジとマインドをお互い理解できるならば、開発手法はウォーターフォールでも構わない。&lt;/p&gt;

&lt;h2 id=&#34;q-最初にスクラムを実践した時-スクラムを誰も知らなかったはずだが-誰をどうやって説得したのか:22e56902b6d51e44bdd3ca7927ccaaab&#34;&gt;Q: 最初にスクラムを実践した時、スクラムを誰も知らなかったはずだが、誰をどうやって説得したのか？&lt;/h2&gt;

&lt;p&gt;A: 前もってスクラムを隠しプロジェクト (カバープロジェクト) で実践していた。そういうところで成功して実績を立てておき、良い噂を流した。&lt;/p&gt;

&lt;p&gt;今は時代が変わったから、そんなことする必要は無い。&lt;a href=&#34;https://secure.standishgroup.com/reports/reports.php&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://secure.standishgroup.com/reports/reports.php&#39;, &#39;Standish Group のレポート&#39;]);&#34; &gt;Standish Group のレポート&lt;/a&gt;を買えば、マネジメントレベルの成功例がたくさん書いてある。あらゆるケーススタディや実績例を学べる。&lt;/p&gt;

&lt;h2 id=&#34;q-エンタープライズスクラムのスプリントの長さはどれくらい:22e56902b6d51e44bdd3ca7927ccaaab&#34;&gt;Q: エンタープライズスクラムのスプリントの長さはどれくらい？&lt;/h2&gt;

&lt;p&gt;A: 通常のスクラムと変わらない。Salesforce は1日おきにミーティングを行い、4週間のスプリントを回している。デイリースクラムに人を集めるのが難しいかもしれないが、とにかく適切な人を参加させること。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SGT2014 基調講演「エンタープライズ・スクラム: 企業活動にスクラムを」</title>
      <link>http://1000k.github.io/2014/01/17/sgt2014-keynote1/</link>
      <pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2014/01/17/sgt2014-keynote1/</guid>
      <description>

&lt;p&gt;1/14～1/15にかけて行われた &lt;a href=&#34;http://scrumgatheringtokyo.org/2014/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://scrumgatheringtokyo.org/2014/&#39;, &#39;Regional Scrum Gathering Tokyo 2014&#39;]);&#34; &gt;Regional Scrum Gathering Tokyo 2014&lt;/a&gt; に参加してきました。素晴らしいアイディアを数多く得ることができました。&lt;/p&gt;

&lt;p&gt;自分の知識の整理も兼ねて、その幾つかを共有します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.1000k.net/wp-content/uploads/mike_beedle_and_1000kei.jpg&#34; alt=&#34;Mike Beedle と記念写真&#34; width=&#34;400&#34; height=&#34;327&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(↑Mike Beedle と撮った記念写真)&lt;/p&gt;

&lt;p&gt;まずは1日目に行われた、&lt;a href=&#34;http://www.scrumalliance.org/community/profile/mbeedle&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.scrumalliance.org/community/profile/mbeedle&#39;, &#39;Mike Beedle&#39;]);&#34; &gt;Mike Beedle&lt;/a&gt; 氏による基調講演です。&lt;/p&gt;

&lt;p&gt;Mike は2001年から &lt;a href=&#34;http://www.newgovernance.com/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.newgovernance.com/&#39;, &#39;New Governanace 社&#39;]);&#34; &gt;New Governanace 社&lt;/a&gt; の CEO としてエンタープライズスクラムを実践しており、全てのビジネスプロセスをスクラムで実践しています。講演ではその効果とやり方を解説されました。&lt;/p&gt;

&lt;p&gt;以下に印象に残ったフレーズをメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;金言と苦言:c4a84ae4001768191e1418635d0eceeb&#34;&gt;金言と苦言&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;「唯一変わらないのは、変わること、変わり続けること、変わることは避けられないことである。これが今の社会を支配している要因なのだ。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;#8212; アイザック・アシモフ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「&lt;a href=&#34;http://www.quotes.net/quote/8532&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.quotes.net/quote/8532&#39;, &#39;必ずしも変わる必要はない。生き残ることは強制ではないから&#39;]);&#34; &gt;必ずしも変わる必要はない。生き残ることは強制ではないから&lt;/a&gt;」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;#8212; エドワード・デミング&lt;/p&gt;

&lt;h2 id=&#34;売上の大半は新製品から生まれている:c4a84ae4001768191e1418635d0eceeb&#34;&gt;売上の大半は新製品から生まれている&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.prod-dev.com/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.prod-dev.com/&#39;, &#39;Product Development Institute Inc.&#39;]);&#34; &gt;Product Development Institute Inc.&lt;/a&gt; (プロダクト開発のコンサル会社) が&lt;a href=&#34;http://www.stage-gate.net/downloads/working_papers/wp_32.pdf&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;,&#39;download&#39;,&#39;http://www.stage-gate.net/downloads/working_papers/wp_32.pdf&#39;]);&#34; &gt;2012年に発表したレポート&lt;/a&gt; によると、ビジネスの利益の比率は驚くべき結果となっている。&lt;/p&gt;

&lt;p&gt;平均すると、3年以内に作った新製品が売上の27.5%を占めている。トップ20%企業ではその割合は38%になり、利益の42.4%が新製品から得られている。さらにトップ20%企業の「5年間の新製品からの利益率」を見ると、収入と利益のほぼ70%は新製品から生まれている。&lt;/p&gt;

&lt;p&gt;つまり、現代では売上の多くは新製品から生まれている。逆に言うと、新製品が生み出せない場合は利益が確保できない。&lt;/p&gt;

&lt;h2 id=&#34;スクラムは会社の素早い変革を可能にする:c4a84ae4001768191e1418635d0eceeb&#34;&gt;スクラムは会社の素早い変革を可能にする&lt;/h2&gt;

&lt;p&gt;勝者はイノベーションを、より速く、より効率的に生み出している。利益と収入は、イノベーションの速度と効率性と柔軟性に直接リンクしている。Nokia, Motorola などはこの点で成功できなかった。&lt;/p&gt;

&lt;p&gt;スクラムは高い利益を得るための、素早い変革を可能にする方法である。&lt;/p&gt;

&lt;h2 id=&#34;エンタープライズスクラムとは:c4a84ae4001768191e1418635d0eceeb&#34;&gt;エンタープライズスクラムとは？&lt;/h2&gt;

&lt;p&gt;パラメータ化されたスクラムの包括的な応用。様々なビジネス環境で利用できる。&lt;/p&gt;

&lt;p&gt;1993年に Jeff Sutherland が組織パターン (by Jimm Coplien) と包摂アーキテクチャ (by Rod Brooks) を組み合わせて作り、実践した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mountaingoatsoftware.com/blog/agile-succeeds-three-times-more-often-than-waterfall&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.mountaingoatsoftware.com/blog/agile-succeeds-three-times-more-often-than-waterfall&#39;, &#39;2012年に Standish Group が発表した The CHAOS Manifesto&#39;]);&#34; &gt;2012年に Standish Group が発表した The CHAOS Manifesto&lt;/a&gt;を見ると、「プロジェクトの成功率」は、ウォーターフォールが14%なのに対して、アジャイルプロジェクトでは42%に達している。&lt;/p&gt;

&lt;p&gt;伝統的な手法では分割されていた多くのプロセス (戦略設定、マーケティング、製品開発、フィードバック等)は、スクラム(&lt;a href=&#34;http://www.researchgate.net/publication/4231052_Future_of_scrum_parallel_pipelining_of_sprints_in_complex_projects/file/504635217707db28aa.pdf&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;,&#39;download&#39;,&#39;http://www.researchgate.net/publication/4231052_Future_of_scrum_parallel_pipelining_of_sprints_in_complex_projects/file/504635217707db28aa.pdf&#39;]);&#34; &gt;type C Scrum&lt;/a&gt;) においては全てが内包され同時に実行されるようになっている。また、組織体系も「戦略部署」「マーケティング部」という分け方をせず、プロダクト毎に機能横断型なチームを作っていくようになる。&lt;/p&gt;

&lt;p&gt;今は分離して行っているプロセスも、これからの世界ではすべてを同時に行う必要があるのだ。&lt;/p&gt;

&lt;p&gt;エンタープライズスクラムは既に数千の実績がある。IT業界だけでなく、監査、保険、製薬業界など多岐にわたる。&lt;/p&gt;

&lt;h2 id=&#34;スケーリング:c4a84ae4001768191e1418635d0eceeb&#34;&gt;スケーリング&lt;/h2&gt;

&lt;p&gt;スクラムチームは再帰的スクラム (Scrum of Scrum または &lt;a href=&#34;http://www.scrumalliance.org/system/slides/52/original/Scrumbrella%20-%20Scaling%20Scrum.pdf?1319033124&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.scrumalliance.org/system/slides/52/original/Scrumbrella%20-%20Scaling%20Scrum.pdf?1319033124&#39;, &#39;Scrumbrella&#39;]);&#34; &gt;Scrumbrella&lt;/a&gt;) によってスケールする。&lt;/p&gt;

&lt;p&gt;スクラムチームが増えたら、階層バックログを作る。上位のバックログアイテムを個々のチームにアサインし、それぞれのチームでそれをブレークダウンしたバックログを作る。デイリースクラム等で同期を忘れずに行うこと。&lt;/p&gt;

&lt;p&gt;入れ子の改善サイクルを使って、常に改善すること。具体的には、年単位、四半期単位、月単位、週単位のふりかえりを行う。&lt;/p&gt;

&lt;p&gt;リリース計画作りには大部屋 (関係者一同が同じ空間に集う) が有効だが、チームの人数が増えると困難になる。従って、ハイレベルリリース計画とローレベル計画に分けて、必要な人だけで行うようにすると良い。&lt;/p&gt;

&lt;p&gt;計画ができた後の見積もり方法は、ただのスクラムと同じ。&lt;/p&gt;

&lt;p&gt;なお、ベロシティはチームごとのローカルベロシティと、全チーム合計のグローバルベロシティの2つを測定すること。この2つのベロシティを使って、スプリント毎に納期とスコープの再見積もりを行う。&lt;/p&gt;

&lt;h2 id=&#34;大胆な予言:c4a84ae4001768191e1418635d0eceeb&#34;&gt;大胆な予言&lt;/h2&gt;

&lt;p&gt;エンタープライズスクラムは、2020年までにデファクトスタンダードになり、Global 5000 企業の80%が採用するだろう。これは数年前から Jeff と野中郁次郎が述べている。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;密度が非常に高い講演でした。特に印象に残ったのは「5年間の新製品が売上の70%を占めている」という数値です。イノベーションを生み出せない企業が困窮していく根拠がわかりました。&lt;/p&gt;

&lt;p&gt;エンタープライズスクラムについては前知識がありませんでしたが、この講演で概要を掴むことが出来ました。組織は Scrum of Scrum でスケーリングしつつ、多くのパラメータを使ってビジネスを計測し、方針決めに使うようです。このパラメータは発表資料には大量に書いてあるのですが、具体的にいつどうやって使うのかピンと来ませんでした。後で調査してみます。&lt;/p&gt;

&lt;p&gt;なお、講演後の質疑応答も非常に良い内容だったので、&lt;a href=&#34;http://blog.1000k.net/2014/01/17/mike-beedle-%e3%81%b8%e3%81%ae%e8%b3%aa%e5%95%8f/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.1000k.net/2014/01/17/mike-beedle-%e3%81%b8%e3%81%ae%e8%b3%aa%e5%95%8f/&#39;, &#39;Mike Beedle への質問&#39;]);&#34; &gt;Mike Beedle への質問&lt;/a&gt;にまとめました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile Samurai Base Camp 2013 参加レポート</title>
      <link>http://1000k.github.io/2013/12/16/agile-samurai-base-camp-2013-report/</link>
      <pubDate>Mon, 16 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/12/16/agile-samurai-base-camp-2013-report/</guid>
      <description>

&lt;p&gt;レポートが遅れましたが、12/8 (日) に開催された &lt;a href=&#34;http://www.agilesamuraibasecamp.org/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.agilesamuraibasecamp.org/&#39;, &#39;Agile Samurai Base Camp&#39;]);&#34; &gt;Agile Samurai Base Camp&lt;/a&gt; に参加してきました。「テスト駆動開発コース」と「インセプションデッキコース」の2つがありましたが、私は後者に参加しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4274068560/ref=as_li_ss_tl?ie=UTF8&amp;#038;camp=247&amp;#038;creative=7399&amp;#038;creativeASIN=4274068560&amp;#038;linkCode=as2&amp;#038;tag=1000k-22&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.amazon.co.jp/gp/product/4274068560/ref=as_li_ss_tl?ie=UTF8&amp;#038;camp=247&amp;#038;creative=7399&amp;#038;creativeASIN=4274068560&amp;#038;linkCode=as2&amp;#038;tag=1000k-22&#39;, &#39;「アジャイルサムライ」&#39;]);&#34; &gt;「アジャイルサムライ」&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=1000k-22&amp;#038;l=as2&amp;#038;o=9&amp;#038;a=4274068560&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;の内容は1年半ほど前から実践しており、だいぶ身に付いてはいたのですが、ワークショップの中でその価値を再認識させられました。「エレベーターピッチはビジネス側のゴールを示し、パッケージデザインは顧客にとってのゴールを示す」という表現はしっくり来ました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/nawoto&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://twitter.com/nawoto&#39;, &#39;西村直人さん&#39;]);&#34; &gt;西村直人さん&lt;/a&gt;によるワークショップや、&lt;a href=&#34;https://twitter.com/papanda&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://twitter.com/papanda&#39;, &#39;市谷聡啓さん&#39;]);&#34; &gt;市谷聡啓さん&lt;/a&gt;による&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406932X/ref=as_li_ss_tl?ie=UTF8&amp;#038;camp=247&amp;#038;creative=7399&amp;#038;creativeASIN=427406932X&amp;#038;linkCode=as2&amp;#038;tag=1000k-22&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.amazon.co.jp/gp/product/427406932X/ref=as_li_ss_tl?ie=UTF8&amp;#038;camp=247&amp;#038;creative=7399&amp;#038;creativeASIN=427406932X&amp;#038;linkCode=as2&amp;#038;tag=1000k-22&#39;, &#39;「リーン開発の現場」&#39;]);&#34; &gt;「リーン開発の現場」&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=1000k-22&amp;#038;l=as2&amp;#038;o=9&amp;#038;a=427406932X&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;のエピソードなども大変参考になりましたが、特に3名のスクラム実践者が経験談を話すセッションが参考になりました。それぞれのお話の簡単なまとめを共有します。&lt;/p&gt;

&lt;h3 id=&#34;中佐藤-麻記子-さん:aeb03dc5a51eccc7b018530813e3ea50&#34;&gt;中佐藤 麻記子 さん&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4798130613/ref=as_li_ss_tl?ie=UTF8&amp;#038;camp=247&amp;#038;creative=7399&amp;#038;creativeASIN=4798130613&amp;#038;linkCode=as2&amp;#038;tag=1000k-22&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.amazon.co.jp/gp/product/4798130613/ref=as_li_ss_tl?ie=UTF8&amp;#038;camp=247&amp;#038;creative=7399&amp;#038;creativeASIN=4798130613&amp;#038;linkCode=as2&amp;#038;tag=1000k-22&#39;, &#39;ディシプリンド・アジャイル・デリバリー エンタープライズ・アジャイル実践ガイド (Object Oriented SELECTION)&#39;]);&#34; &gt;ディシプリンド・アジャイル・デリバリー エンタープライズ・アジャイル実践ガイド (Object Oriented SELECTION)&lt;/a&gt; &lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=1000k-22&amp;#038;l=as2&amp;#038;o=9&amp;#038;a=4798130613&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;の翻訳者。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どんなプロジェクトでも必ずやるべきこと:「目標を決める→最初のルールを決める→ルールの変更方法のルールを決める」

&lt;ul&gt;
&lt;li&gt;スクラムで置き換えれば、「インセプションデッキを作る→ロールを決める→いつレトロスペクティブを開催するか決める」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どんなプロジェクト体制だろうと、定期的なふりかえりは必須！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;しばたひろし-a-href-https-twitter-com-hsbt-onclick-gaq-push-trackevent-outbound-article-https-twitter-com-hsbt-hsbt-hsbt-a-さん:aeb03dc5a51eccc7b018530813e3ea50&#34;&gt;しばたひろし (&lt;a href=&#34;https://twitter.com/hsbt&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://twitter.com/hsbt&#39;, &#39;@hsbt&#39;]);&#34; &gt;@hsbt&lt;/a&gt;) さん&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;paperboy &amp;amp; co. にスクラムを普及させた時にやったこと:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/hiranabe&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://twitter.com/hiranabe&#39;, &#39;平鍋健児&#39;]);&#34; &gt;平鍋健児&lt;/a&gt;さんのスクラム研修を管理職クラスに受講させた。&lt;/li&gt;
&lt;li&gt;プロダクトオーナー研修も社内で開催した。&lt;/li&gt;
&lt;li&gt;エレベーターピッチ、リーンキャンバス、アジャイルマニフェストなどを、社員の目につくところに貼りまくった。これによって職場の意識が変わった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「やらないことリスト」を作っておかないと、Web サービスの開発は永遠に終わらない。&lt;/li&gt;
&lt;li&gt;エレベーターピッチを暗記できないサービスはやばい。

&lt;ul&gt;
&lt;li&gt;EP が無いチームに OJT を送り込むと、業務の理解に1週間以上かかる。EP があるチームなら、2～3時間で理解できる。&lt;/li&gt;
&lt;li&gt;ビジョンがわかれば、新人でもできることはたくさん見つかる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インセプションデッキは、意思疎通のためのコンテキストとして非常に便利。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mti-岩崎さん:aeb03dc5a51eccc7b018530813e3ea50&#34;&gt;MTI 岩崎さん&lt;/h3&gt;

&lt;p&gt;スクラムを普及する時に体験したつまづき&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最初のつまづき:

&lt;ul&gt;
&lt;li&gt;人が集まらない。&lt;/li&gt;
&lt;li&gt;「われわれはなぜここにいるのか？」と聞くと「仕事だから」と返される。&lt;/li&gt;
&lt;li&gt;会議は静寂に包まれており、PO の独演会になっている。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対策:

&lt;ul&gt;
&lt;li&gt;イベントの参加者は確実に参加させるように、2週間前から予約する。&lt;/li&gt;
&lt;li&gt;まずはやる気のある人を対象に勉強会やワークショップを行う。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;次のつまづき:

&lt;ul&gt;
&lt;li&gt;人が集まりすぎる。&lt;/li&gt;
&lt;li&gt;インセプションデッキの議論が白熱して作り終わらない。早くサービスを作って欲しいのに！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対策:

&lt;ul&gt;
&lt;li&gt;バランスを見るファシリテーターが必要。ゴールが無いのはダメだが、長時間話し合いすぎるのもダメ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まずは「みんなでやってみる」こと。「改善を続ける」こと。ファシリテーターを根気よく探し、育てること。&lt;/li&gt;
&lt;li&gt;それでもダメなことはある。くじけないこと。謙虚と自省が大事。思い上がりは NG。&lt;/li&gt;
&lt;li&gt;周囲の巻き込み方:

&lt;ul&gt;
&lt;li&gt;スクラムに興味のもってくれた人 (イノベーター、アーリーアダプター) を育てる。&lt;/li&gt;
&lt;li&gt;周りの成功体験を増やす。&lt;/li&gt;
&lt;li&gt;口コミが広がるように、根回しをする。&lt;/li&gt;
&lt;li&gt;ズルく、クレバーに伝染させる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;完全なインセプションデッキを作るのは困難。効果的な議論のネタとして使うだけでも十分効果的。

&lt;ul&gt;
&lt;li&gt;「1時間でリーンキャンバスのこの部分を埋めてみよう」など。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は半年ほど前から会社にアジャイルマインドを広めようとしており、日々苦闘しているのですが、今回のセミナーで大変元気付けられました。具体的なアイディアも仕入れることができました。登壇者の皆さん、ありがとうございました。ぜひまた開催していただきたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git の submodule を最新にする方法</title>
      <link>http://1000k.github.io/2013/10/19/command-to-update-git-submodule/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/10/19/command-to-update-git-submodule/</guid>
      <description>

&lt;p&gt;「そんなの &lt;code&gt;git submodule update&lt;/code&gt; で一発だろ」と思っていましたが、全然違いました。このコマンドをいくら叩いても、標準出力には何も表示されず、submodule はちっとも更新されません。&lt;/p&gt;

&lt;p&gt;submodule を最新の状態にするコマンドは &lt;code&gt;git submodule foreach git pull origin master&lt;/code&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;参考:e45e994ba8135917364d3e9a430429e3&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5828324/update-git-submodule&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://stackoverflow.com/questions/5828324/update-git-submodule&#39;, &#39;Update git submodule &amp;#8211; Stack Overflow&#39;]);&#34; &gt;Update git submodule &amp;#8211; Stack Overflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grunt watch が遅い時の改善方法</title>
      <link>http://1000k.github.io/2013/10/20/speed-up-grunt-watch/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/10/20/speed-up-grunt-watch/</guid>
      <description>

&lt;p&gt;Grunt を使うからには &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-watch#optionsnospawn&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://github.com/gruntjs/grunt-contrib-watch#optionsnospawn&#39;, &#39;grunt-contrib-watch&#39;]);&#34; &gt;grunt-contrib-watch&lt;/a&gt; でファイルの変更を監視して自動ビルドしたいのですが、どうも遅い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grunt watch

Running &amp;quot;watch&amp;quot; task
Waiting...OK
&amp;gt;&amp;gt; File &amp;quot;src/sass/screen.scss&amp;quot; changed.

Running &amp;quot;compass:dist&amp;quot; (compass) task
overwrite app/css/screen.css (0.333s)
Compilation took 0.342s

Running &amp;quot;cssmin:add_banner&amp;quot; (cssmin) task
File app/css/screen.min.css created.

Running &amp;quot;cssmin:minify&amp;quot; (cssmin) task
File app/css/app.min.css created.
File app/css/screen.min.css created.

Done, without errors.
Completed in 12.602s at Sat Oct 19 2013 16:26:32 GMT+0000 (UTC) - Waiting...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;タスクの実行自体は1秒もかかっていないのに、全体では12秒ほどかかっていました。&lt;/p&gt;

&lt;p&gt;Gruntfile の設定を見直すことで改善できたので、そのやり方をメモしておきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grunt watch&lt;/code&gt; のボトルネックは、ファイルの変更を検知後にタスクプロセスを子プロセスとしてスポーンさせる部分にあるようです。&lt;/p&gt;

&lt;p&gt;したがって、子プロセスとしてタスクを起動するオプションを無効にすることで回避できます。&lt;/p&gt;

&lt;p&gt;以下のように、Gruntfile.js 内で &lt;code&gt;spawn: false&lt;/code&gt; を指定してやれば OK です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(grunt) {
  grunt.initConfig({
    // ...
    watch: {
      options: {
        spawn: false
      },
      css: {
        files: [&#39;src/sass/*.scss&#39;],
        tasks: [&#39;compass&#39;, &#39;cssmin&#39;]
      }
    }
  });
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで大幅にスピードが改善されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grunt watch

Running &amp;quot;watch&amp;quot; task
Waiting...OK
&amp;gt;&amp;gt; File &amp;quot;src/sass/screen.scss&amp;quot; changed.


Running &amp;quot;compass:dist&amp;quot; (compass) task
identical app/css/screen.css (0.319s)
Compilation took 0.328s

Running &amp;quot;cssmin:add_banner&amp;quot; (cssmin) task
File app/css/screen.min.css created.

Running &amp;quot;cssmin:minify&amp;quot; (cssmin) task
File app/css/app.min.css created.
File app/css/screen.min.css created.

Running &amp;quot;watch&amp;quot; task
Completed in 0.712s at Sat Oct 19 2013 16:27:58 GMT+0000 (UTC) - Waiting...
OK
&amp;gt;&amp;gt; File &amp;quot;src/sass/screen.scss&amp;quot; changed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;12秒が0.7秒に。イェーイ！&lt;/p&gt;

&lt;h2 id=&#34;参考:bcbef8a25879c17668c0f2da3a272309&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-watch/issues/69&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://github.com/gruntjs/grunt-contrib-watch/issues/69&#39;, &#39;Why Watch is so slow compared to Regarde · Issue #69 · gruntjs/grunt-contrib-watch&#39;]);&#34; &gt;Why Watch is so slow compared to Regarde · Issue #69 · gruntjs/grunt-contrib-watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-watch#optionsnospawn&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;https://github.com/gruntjs/grunt-contrib-watch#optionsnospawn&#39;, &#39;gruntjs/grunt-contrib-watch#optionsnospawn&#39;]);&#34; &gt;gruntjs/grunt-contrib-watch#optionsnospawn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Adobe Photoshop CCのUIを英語にする方法</title>
      <link>http://1000k.github.io/2013/09/10/how-to-change-ui-language-to-eignlish-of-photoshop-cc/</link>
      <pubDate>Tue, 10 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/09/10/how-to-change-ui-language-to-eignlish-of-photoshop-cc/</guid>
      <description>

&lt;p&gt;英語サイトからカスタムアクションをダウンロードして使おうとしたものの、レイヤー名が日本語なせいで、英語版のレイヤー名を前提としたアクションが途中で止まってしまいます。&lt;/p&gt;

&lt;p&gt;Photoshop を英語版で動かすようにしたら使えるようになったのですが、そのやり方が直感的ではありませんでした。メモしておきます。&lt;/p&gt;

&lt;p&gt;なお、使用バージョンは Adobe Photoshop CC (version 14.0) です。&lt;/p&gt;

&lt;p&gt;まず、Photoshop を開いている場合は終了します。&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;{Photoshop のインストールディレクトリ}/Locales/ja_JP/Support Files&lt;/code&gt; の中にある &lt;code&gt;tw10428.dat&lt;/code&gt; というファイルを、&lt;code&gt;tw10428.dat.bak&lt;/code&gt; にリネームします。&lt;/p&gt;

&lt;p&gt;Windows 7 のデフォルトでは &lt;code&gt;C:\Program Files\Adobe\Adobe Photoshop CC (64 Bit)\Locales\ja_JP\Support Files&lt;/code&gt; の中にありました。&lt;/p&gt;

&lt;p&gt;これで Photoshop を再起動すれば、UI が英語になっています。&lt;/p&gt;

&lt;p&gt;高いアドビ税払ってるんだから、このへんのローカリゼーションはちゃんとやってほしいですね。せめて UI の言語ぐらいオプションから設定させてほしいです。（一応 &amp;#8220;編集 &amp;gt; 環境設定 &amp;gt; インターフェース&amp;#8221;）の中に言語を選ぶセレクトボックスはありますが、日本語しか選べません。じゃあ置くなよ。）&lt;/p&gt;

&lt;h2 id=&#34;参考:39e92141fb766995ade2d8a4ea832417&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=3I8B8QH5uRE&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.youtube.com/watch?v=3I8B8QH5uRE&#39;, &#39;HOW TO CHANGE LANGUAGE IN PHOTOSHOP [Works with (CC, Win, Mac)] &amp;#8211; YouTube&#39;]);&#34; &gt;HOW TO CHANGE LANGUAGE IN PHOTOSHOP [Works with (CC, Win, Mac)] &amp;#8211; YouTube&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Subversion 1.7 で switch や merge ができないときの対処方法</title>
      <link>http://1000k.github.io/2013/07/25/what-to-do-if-you-can-not-switch-and-merge-in-subversion-17/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/07/25/what-to-do-if-you-can-not-switch-and-merge-in-subversion-17/</guid>
      <description>

&lt;p&gt;Subversion 1.7.10 をソースからインストールしたら、&lt;code&gt;svn switch&lt;/code&gt; や &lt;code&gt;svn merge&lt;/code&gt; が以下のエラーを吐いて失敗するようになってしまいました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# svn merge https://uso.com/svn/mojamoja/2.13.1
...
svn: E200007: Error running context
svn: E200007: Trying to use an unsupported feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直し方をメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;原因:b3d12b85aa6526b84cee44966cb0c763&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;Subversion は内部の HTTP/HTTPS クライアントとして serf または neon を使います。Configure オプションを特に指定しない場合は serf が使われるようですが、これに不具合があったようです。&lt;/p&gt;

&lt;p&gt;何も configure オプションを指定せずにインストールした場合、&lt;code&gt;svn --version&lt;/code&gt; を実行すると下記の通り出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# svn --version
svn, version 1.7.10 (r1485443)
   compiled Jul 24 2013, 16:16:57
...
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - handles &#39;http&#39; scheme
  - handles &#39;https&#39; scheme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「serf が http と https をハンドルするぜ」と書いていますが、実際には E200007 エラーを吐いて止まります。&lt;/p&gt;

&lt;h2 id=&#34;対策:b3d12b85aa6526b84cee44966cb0c763&#34;&gt;対策&lt;/h2&gt;

&lt;p&gt;もう一つの選択肢である neon を使うようにしたら、問題なく動作するようになりました。&lt;/p&gt;

&lt;p&gt;再コンパイル手順は以下のとおりです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd subversion-1.7.10/

// 依存しているパッケージをダウンロードしてくれる便利なスクリプト。
# ./get-deps.sh

// neon をコンパイルしてインストールする。
// (CentOS なら `yum install neon neon-devel` でも OK)
// `--with-ssl` を忘れずに！
# cd neon/
# ./configure --with-ssl
# make &amp;amp;#038;&amp;amp;#038; make install

// Subversion をインストールする。
# cd ../
# make distclean
# ./configure \
  --without-berkeley-db \
  --with-neon \
  --with-ssl
# make &amp;amp;#038;&amp;amp;#038; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正しくインストールできると、以下のように &lt;code&gt;ra_neon&lt;/code&gt; という表示が出ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# svn --version
...
* ra_neon : Module for accessing a repository via WebDAV protocol using Neon.
  - handles &#39;http&#39; scheme
  - handles &#39;https&#39; scheme
* ra_svn : Module for accessing a repository using the svn network protocol.
  - handles &#39;svn&#39; scheme
* ra_local : Module for accessing a repository on local disk.
  - handles &#39;file&#39; scheme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;handles &#39;https&#39; scheme&lt;/code&gt; と出力されない時は、&lt;code&gt;--with-ssl&lt;/code&gt; を付け忘れています。それでは https 通信ができないので、再コンパイルしてください。&lt;/p&gt;

&lt;h2 id=&#34;余談:b3d12b85aa6526b84cee44966cb0c763&#34;&gt;余談&lt;/h2&gt;

&lt;p&gt;今回とは逆で、「neon だとエラーになるが serf なら大丈夫だった」という事例もありました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://masutaka.net/chalow/2009-06-15-1.html&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://masutaka.net/chalow/2009-06-15-1.html&#39;, &#39;Debian squeeze の subversion で http リポジトリにアクセスできなくなった / マスタカの ChangeLog メモ&#39;]);&#34; &gt;Debian squeeze の subversion で http リポジトリにアクセスできなくなった / マスタカの ChangeLog メモ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;バージョンアップのたびに不具合が入れ替わるんでしょうか。&lt;/p&gt;

&lt;p&gt;奇妙です。&lt;/p&gt;

&lt;h2 id=&#34;参考:b3d12b85aa6526b84cee44966cb0c763&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.iss.ms/2009/04/12/141537&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.iss.ms/2009/04/12/141537&#39;, &#39;[memo][svn] svnクライアントにSSLをサポートさせる « いわぶろ（ろてん）&#39;]);&#34; &gt;[memo][svn] svnクライアントにSSLをサポートさせる « いわぶろ（ろてん）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.r-unit.co.jp/archives/726&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://blog.r-unit.co.jp/archives/726&#39;, &#39;はだかの隊長日記 » Subversionコンパイル方法&#39;]);&#34; &gt;はだかの隊長日記 » Subversionコンパイル方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://masutaka.net/chalow/2009-06-15-1.html&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://masutaka.net/chalow/2009-06-15-1.html&#39;, &#39;Debian squeeze の subversion で http リポジトリにアクセスできなくなった / マスタカの ChangeLog メモ&#39;]);&#34; &gt;Debian squeeze の subversion で http リポジトリにアクセスできなくなった / マスタカの ChangeLog メモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Agile Conference Tokyo 2013 のまとめ</title>
      <link>http://1000k.github.io/2013/07/18/summary-of-agile-conference-tokyo-2013/</link>
      <pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/07/18/summary-of-agile-conference-tokyo-2013/</guid>
      <description>

&lt;p&gt;Agile Conference Tokyo 2013 のまとめ&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;17&lt;/sub&gt; に開催された &lt;a href=&#34;http://pw.tech-arts.co.jp/act2013/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://pw.tech-arts.co.jp/act2013/&#39;, &#39;Agile Conference tokyo 2013&#39;]);&#34; &gt;Agile Conference tokyo 2013&lt;/a&gt; に参加してきました。10時から18時までひたすら座学で激しく消耗しましたが、得るものも多かったです。&lt;/p&gt;

&lt;p&gt;全体を通して思ったことは下記の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アジャイルを正しく導入できた企業は、プロセスを回すことで、プロセス自体が進化している。&lt;/li&gt;
&lt;li&gt;既存のプロセスから移行するためには、組織全体へのアジャイルプロセスの教育と、トップダウンの号令が必要。

&lt;ul&gt;
&lt;li&gt;ボトムアップだけでは、部署間の壁を超えられない、企業ルールを変えられない。結局変革しきれない！&lt;/li&gt;
&lt;li&gt;間違ったアジャイル知識は害。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アジャイルプロセスは、とっくに開発者だけのものではない。ビジネス全体がターゲットになっている。&lt;/li&gt;
&lt;li&gt;テスト自動化、CI すらやっていない企業は勝ち目がない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下、各セッション毎に重要だと感じたことをまとめます。&lt;/p&gt;

&lt;h2 id=&#34;オープニング:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;オープニング&lt;/h2&gt;

&lt;p&gt;Mihn Le 氏 (株式会社テクノロジックアート 取締役副社長)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「この中で、会社でアジャイルプロセス使ってる人は？」

&lt;ul&gt;
&lt;li&gt;結果を見て「去年の2倍程度」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アジャイルの効果

&lt;ul&gt;
&lt;li&gt;アジャイルによってリスクが減らせ、コミュニケーションリスクも軽減できる。&lt;/li&gt;
&lt;li&gt;必要とするドキュメンテーションも自動化した。エンジニアは自分の開発に集中できる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;顧客はほとんど日本企業で、アジャイルを導入したいと考えている。でも昔の環境からなかなか脱却できない。ペーパーワークが4割。すべてをガラッと変えず、徐々に歩み寄るべき。従来のモデルとアジャイルを融合させていくところから始める。イテレーション、TDD、ペアプロ、CIなど。&lt;/li&gt;
&lt;li&gt;日本の比較的大きなSIerからの質問「アメリカと日本のクライアントの大きな違いはなにか？」

&lt;ul&gt;
&lt;li&gt;アメリカの方がデザインステップが細かい。&lt;/li&gt;
&lt;li&gt;アメリカの方がドキュメンテーションプロセスを変更することに抵抗する。&lt;/li&gt;
&lt;li&gt;日本の方がむしろざっくりしているので、アジャイルには向いていると提案した。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アジャイルをやることになったら、_トップボトムで_全員が正しくアジャイルのことを学習しなければならない。また、なにをやっているのか見えるようにしなければならない。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基調講演-戦略としてのカンバン-ビジネスイノベーションのために:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;基調講演: 戦略としてのカンバン：ビジネスイノベーションのために&lt;/h2&gt;

&lt;p&gt;Kraig T.Parkinsons 氏 (ThoughtWorks Inc. Principal Consultant)&lt;/p&gt;

&lt;p&gt;かなりのボリュームでした。簡単にまとめます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多くの会社はこれまでの習慣を捨てられないでいる。&lt;/li&gt;
&lt;li&gt;フォード、マッキンジー、FedExは今ではITソリューションとシステムを売っている。これまでのビジネスを引きずっていてはおいて行かれる。IT部門をビジネス部門と分けているともう勝てない。それでうまくいく時代は終わっている。&lt;/li&gt;
&lt;li&gt;多くの製品は寿命が短くなっている。製造ラインの寿命は劇的に短くなり、常に移行状態にある。一昔前は何年もかけて製品を社会に出していたが、もはやそれでは遅すぎる。勝てる会社は、短期間で何世代ものバージョンアップを重ね、たちまち自分たちの勝てる業界を作る。しかしそこで成功しても、イノベーションを止めればすぐに陳腐化してしまう。&lt;/li&gt;
&lt;li&gt;どうすれば企業が常にイノベーションを起こせるのか？それには_イノベーションをルーチン化しなければならない_。一度ヒットをとばしても、それをイノベートし続けなければすぐに陳腐化してしまう。ThoughWorks ではカンバンを使ってこれを実現している。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;カンバンの理念:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;カンバンの理念&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;原則1: 「ストーリーを知っている」と仮定しない

&lt;ul&gt;
&lt;li&gt;多くの PM はバックログをマネージメントしようとしがち。&lt;/li&gt;
&lt;li&gt;過去のユーザーストーリーはあくまで過去であり、将来的に何が可能かはそこには結局書いていない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;原則2: 必要になる人を正しく選ぶ

&lt;ul&gt;
&lt;li&gt;ビジネスオーナー: 代理ではダメ！危機感の無い人ではダメ。必死に利益を欲しているだけ人と対面する。&lt;/li&gt;
&lt;li&gt;UXデザイナー&lt;/li&gt;
&lt;li&gt;技術者: 何が実現でき、何ができないかを教えてくれる。&lt;/li&gt;
&lt;li&gt;ユーザーと顧客:「こうあってほしい」という世界を教えてくれる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;原則3: できるだけ頻繁に現場に行って見る

&lt;ul&gt;
&lt;li&gt;現場意識を持つ。&lt;/li&gt;
&lt;li&gt;実際にそこで何が起きているのかをしっかり見る。&lt;/li&gt;
&lt;li&gt;役員室やプロジェクトルームで伝達されているだけでは伝わらない。自分の目で見て体感すること。&lt;/li&gt;
&lt;li&gt;「百聞は一見に如かず」は本当。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;実際にtwが始めたこと:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;実際にTWが始めたこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ダイバージェント（発散的）な思考プロセス → 収束的な思考プロセス

&lt;ul&gt;
&lt;li&gt;支離滅裂に見える発散的プロセスを行わないと、可能性が広がらない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;5つのステップ: 機会を捉える→アイディアを生み出す→実現後の予想図を描く→テストと検証→解決策を収穫する

&lt;ul&gt;
&lt;li&gt;すべてのステージで学習できる。「継続的学習」&lt;/li&gt;
&lt;li&gt;学習を通じてカイゼンが起きるように努力する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デリバリーチームがより発散的なアイディアを出せるようにサポートする。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;どうすればこれができるようになるか:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;どうすればこれができるようになるか？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;誰でも参加できる社風を作る。&lt;/li&gt;
&lt;li&gt;イノベーションの様々なやり方を知る。&lt;/li&gt;
&lt;li&gt;WIPを制限し、フォーカスを絞り、アウトプットを引き出す。&lt;/li&gt;
&lt;li&gt;複雑な問題に対処するため、サービスのクラス分けと優先順位づけも有効。

&lt;ul&gt;
&lt;li&gt;すべてのサービスが等価値ではない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;仕事とマネージのペースを知る。&lt;/li&gt;
&lt;li&gt;やりがいのあるミッションが人々を奮い立たせる。

&lt;ul&gt;
&lt;li&gt;コスト削減の追求ばかりでは萎える。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;継続的デリバリーを持つ。

&lt;ul&gt;
&lt;li&gt;これがパイプラインとなる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ピボット可能にデザインする。

&lt;ul&gt;
&lt;li&gt;いつでも最適な道に移れるようにしておく。&lt;/li&gt;
&lt;li&gt;巨大な（モノリシックな）デザインだと切り替えが不可能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;可視的にマネージする。

&lt;ul&gt;
&lt;li&gt;いつどこで何が動いているのかを、誰にでも見えるようにする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;協業する。

&lt;ul&gt;
&lt;li&gt;ビジネスは_チームスポーツ_である。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セッション1-アジャイルな企業のto-beモデルを提示するscaled-agile-framework-safe:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;セッション1: アジャイルな企業のTo Beモデルを提示するScaled Agile Framework (SAFe)&lt;/h2&gt;

&lt;p&gt;藤井 拓氏 (オージス総研 技術部アジャイル開発センター センター長)&lt;/p&gt;

&lt;p&gt;SAFe とは、企業規模でリーンとアジャイルのプラクティスを実現するためのフレームワーク。&lt;a href=&#34;http://scaledagileframework.com/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://scaledagileframework.com/&#39;, &#39;Scaled Agile Framework&#39;]);&#34; &gt;Scaled Agile Framework&lt;/a&gt; で公開されている。&lt;/p&gt;

&lt;p&gt;細かいことはホームページに書いてあるので省略。一言で言うと、複数の Scrum チームを束ねて定期的なリリースを可能にするルールと、経営層の意思決定をリリースに繋げる流れを示したフレームワーク。&lt;/p&gt;

&lt;p&gt;特に気になったアジャイルリリース列車 (ART) の説明は下記。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;50-100名のメンバーを5-12のチームにし、8-12週間ごとにリリースをする。&lt;/li&gt;
&lt;li&gt;プロダクト毎に「プロダクト管理者」が1人いて、その下に各チーム毎にPOが割り振られている。&lt;/li&gt;
&lt;li&gt;チームレベルではScrumを実践。&lt;/li&gt;
&lt;li&gt;チームは2週間ごとにインクリメントを納品する。&lt;/li&gt;
&lt;li&gt;技術的プラクティスはXP。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セッション2-スクラムと品質-日本マイクロソフト提供セッションー日本のアジャイル実践の現場から:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;セッション2: スクラムと品質 （日本マイクロソフト提供セッションー日本のアジャイル実践の現場から）&lt;/h2&gt;

&lt;p&gt;細谷 泰夫氏 （三菱電機株式会社 通信機製作所、TFSUG立ち上げスタッフ）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;なぜプロダクトの品質が悪くなるのか？

&lt;ul&gt;
&lt;li&gt;オーバーコミットメント&lt;/li&gt;
&lt;li&gt;階層的な組織構造&lt;/li&gt;
&lt;li&gt;上の2つが組み合わさると、激しく品質が下がる。しかも持続して負のスパイラルを生む。&lt;/li&gt;
&lt;li&gt;Scrum は、こうした状況を避けやすい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Scrum 実践に必要なこと: 型、プロセスの習熟

&lt;ul&gt;
&lt;li&gt;適切に運営されたフレームワーク&lt;/li&gt;
&lt;li&gt;プロセスの理解とチームでの実行の繰り返し&lt;/li&gt;
&lt;li&gt;頭ではなく体に型をなじませる、習慣化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;三菱電機での工夫

&lt;ul&gt;
&lt;li&gt;新人をチームに入れる時は、ベテランと組ませて、スキルの伝播を行う。&lt;/li&gt;
&lt;li&gt;TDDが簡単にできなさそうな時は、すぐスパイクソリューションかチームレビューに移る。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;特別講演-エンタープライズ規模におけるカンバンの運用:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;特別講演: エンタープライズ規模におけるカンバンの運用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;高木 徹 氏（株式会社豊田マネジメント研究所　副社長）&lt;/li&gt;
&lt;li&gt;三井 伸行氏（株式会社戦略スタッフ・サービス　取締役）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;日本のit業界の現状:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;日本のIT業界の現状&lt;/h3&gt;

&lt;p&gt;90% 以上が質が不足と回答。特にプロジェクトマネジメントが 62.5% 不足。&lt;/p&gt;

&lt;h3 id=&#34;なぜマネジメントが低下した:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;なぜマネジメントが低下した？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;統制型マネジメントの崩壊&lt;/li&gt;
&lt;li&gt;自律的に動ける人材が育っていない&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;アジャイル開発の土壌を醸成する:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;アジャイル開発の土壌を醸成する&lt;/h3&gt;

&lt;p&gt;「上司が変わると仕事のやり方が変わる」のはダメ。&lt;/p&gt;

&lt;h3 id=&#34;エンタープライズにおけるカンバンの進化:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;エンタープライズにおけるカンバンの進化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;カンバンに貼り出すことで、個々人が持っている暗黙知が可視化され、議論可能になる。&lt;/li&gt;
&lt;li&gt;議論によって形式知を取り出し、改善アイディアを実践する。&lt;/li&gt;
&lt;li&gt;新たに溜まった暗黙知を、またカンバンに貼り出す。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分やチームの仕事を写像→カンバンに見える化→暗黙知が形式知に置き換えられる→カイゼンのための会話が生まれる→修正した形式知に従ってやってみる→ツールを見て仕事をする（暗黙化）→カイゼンのアイディアを写像→&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#34;アジャイルプロセス適用のステップ:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;アジャイルプロセス適用のステップ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ステージ１: 「自分たちがまずどうなりたいのか」を自分たちで見える化する。

&lt;ul&gt;
&lt;li&gt;カンバンに貼り出すと効果的。&lt;/li&gt;
&lt;li&gt;「思っていることを出して」と言っても出ないなら、それ自体が大問題。&lt;/li&gt;
&lt;li&gt;KPT は問題を炙り出す道具として使える。&lt;/li&gt;
&lt;li&gt;ボード一つ作るのにも3ヶ月はかかる。&lt;/li&gt;
&lt;li&gt;いつか芽が出ることを感じられれば続けられる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ステージ2: 事業方針に展開する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;適用のポイント:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;適用のポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;経営幹部が組織を変えたいのかどうか確かめ、それをどう落とし込んでいくのか考える。&lt;/li&gt;
&lt;li&gt;トップダウンのほうが手戻りが少ない。手戻り工数は膨大。&lt;/li&gt;
&lt;li&gt;パイロット運用だけだと、他部署まで変えていくことができないことが多い。&lt;/li&gt;
&lt;li&gt;複数部署にカイゼン風土があれば、連携して組織の壁を越えられる。でも2年はかかる。&lt;/li&gt;
&lt;li&gt;カンバンを作る時は、「運用を始めて、不具合が出てきたらカイゼンする」というやり方でOK。

&lt;ul&gt;
&lt;li&gt;カンバンはどんどん進化する！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セッション3-大規模分散アジャイルを支えるプラットフォーム:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;セッション3: 大規模分散アジャイルを支えるプラットフォーム&lt;/h2&gt;

&lt;p&gt;上村 務氏(日本アイ・ビー・エム株式会社)&lt;/p&gt;

&lt;p&gt;IBM が使っている大規模分散開発用のアジャイルフレームワークの説明。ほとんど Rational 製品の解説だけで終わっていました。&lt;/p&gt;

&lt;h2 id=&#34;セッション4-コンパクトなチームでのアジャイル開発とその実践:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;セッション4: コンパクトなチームでのアジャイル開発とその実践&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;及川 喜之氏(株式会社セールスフォース・ドットコム)&lt;/li&gt;
&lt;li&gt;堀 譲治氏(株式会社シャノン)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;salesforce-のスクラムチーム:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;SalesForce のスクラムチーム&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;100以上のスクラムチームがある。&lt;/li&gt;
&lt;li&gt;「Salesforce Agile」でググればスライドがいっぱい出てくるよ！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;シャノンで使っているツール:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;シャノンで使っているツール&lt;/h3&gt;

&lt;p&gt;基本的にOSSや無料パッケージの組み合わせ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pivotal Tracker, Google Docs, Cacoo&lt;/li&gt;
&lt;li&gt;Github Enterprise , Jenkins, Bugzilla&lt;/li&gt;
&lt;li&gt;Heroku, AWS&lt;/li&gt;
&lt;li&gt;Google talk, IRC, Skype&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;pivotal-tracker:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;Pivotal Tracker&lt;/h4&gt;

&lt;p&gt;Googleスプレッドシートでストーリー管理していたが、以下の理由で限界を迎えたので使い始めた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;イテレーションがわかりづらい&lt;/li&gt;
&lt;li&gt;並び替えしづらい&lt;/li&gt;
&lt;li&gt;依存性の管理ができない&lt;/li&gt;
&lt;li&gt;「いつ終わるのか」の未来管理ができない（致命的）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pivotal Tracker のいいところ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bugzilla、GitHub と連携が可能 → トラッキングが簡単に！&lt;/li&gt;
&lt;li&gt;複数のストーリーをまとめて「エピック」として束ねられる

&lt;ul&gt;
&lt;li&gt;エピック毎に企画し、予算を出すようにしている。&lt;/li&gt;
&lt;li&gt;エピック単位の進捗管理が可能になる。いつ終わるかすぐわかる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ベロシティと、リリースまでに必要なイテレーション数を自動で算出 → 精神論に拠らないリリースプラン&lt;/li&gt;
&lt;li&gt;アナログに近い使い勝手&lt;/li&gt;
&lt;li&gt;ほかのツールとの統合が容易&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;github-enterprise:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;GitHub Enterprise&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;外部ツールとのインテグレーションが充実&lt;/li&gt;
&lt;li&gt;標準の機能で、Web上で簡単にコードレビューができる&lt;/li&gt;
&lt;li&gt;統計ツール、グラフが充実 → ふりかえりに数値的裏付けが使えるようになった&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;jenkinsを使ったci:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;Jenkinsを使ったCI&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;自動テスト、コードカバレッジ監視、デプロイ、Seleniumのキックで利用&lt;/li&gt;
&lt;li&gt;自動で重くないスレーブノードにテストを分散できるプラグイン&lt;/li&gt;
&lt;li&gt;Test Failed 時は IRC に連絡&lt;/li&gt;
&lt;li&gt;Pull Request と同時に Unit Testing 実行 → 壊れたビルドをマージしない！&lt;/li&gt;
&lt;li&gt;コードレビュー時にGitHubレビューに「Jenkins, test this please」と書き込むと、UTが走る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;透明化、自動化ができた。&lt;/p&gt;

&lt;h4 id=&#34;heroku:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;Heroku&lt;/h4&gt;

&lt;p&gt;AWS を使いたくても、エンタープライズ向けの必須要件 (セキュリティ、パフォーマンス、SLA、&amp;#8230;) をクリアさせることができない。&lt;/p&gt;

&lt;p&gt;人数が少なく専任のインフラエンジニアを割り振れないので、それらを吸収してくれる PaaS の Heroku を使い始めた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;サーバーを意識しなくて良い。&lt;/li&gt;
&lt;li&gt;Git コマンドだけでデプロイ可能。git commit &amp;amp; push だけ。&lt;/li&gt;
&lt;li&gt;パフォーマンスアップも WebUI から簡単にできる。

&lt;ul&gt;
&lt;li&gt;業種上、キャンペーン日だけアクセスが激増することが多いが、簡単に負荷に対応できる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New Relic プラグインで簡単にサーバー監視が可能。&lt;/li&gt;
&lt;li&gt;無料でパフォーマンス分析まで可能。&lt;/li&gt;
&lt;li&gt;運用をかなり簡素化できる。高度なインフラ知識が無くても十分運用できる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セッション5-事例から見るアジャイルの失敗と成功-二度とアジャイルはやりたくなかった人が語るアジャイルの成功ポイント:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;セッション5: 事例から見るアジャイルの失敗と成功 （二度とアジャイルはやりたくなかった人が語るアジャイルの成功ポイント）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;平岡 嗣晃氏（株式会社　日立ソリューションズ）&lt;/li&gt;
&lt;li&gt;奈加 健次氏（株式会社　日立ソリューションズ）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;日立ソリューションズの失敗事例と成功事例。&lt;/p&gt;

&lt;h3 id=&#34;プロセス:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;プロセス&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;プレーンなアジャイル&lt;/li&gt;
&lt;li&gt;ハイブリッドアジャイル

&lt;ul&gt;
&lt;li&gt;要件定義、基本設計、リリーステスト: ウォーターフォール&lt;/li&gt;
&lt;li&gt;詳細設計、開発: アジャイル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ウォーターフォール&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2007年の失敗:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;2007年の失敗&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;本のとおりにやってみようとした。

&lt;ul&gt;
&lt;li&gt;「ドキュメントを作らない」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;→「優秀なプログラマを集めればアジャイルができる」と勘違いしたまま、100人集めた&lt;/li&gt;
&lt;li&gt;→結合テストで全く繋がらずボロボロ&lt;/li&gt;
&lt;li&gt;→結局24時間体制でフォロー、全ドキュメントレビューも実施。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2度とアジャイルやりたくないと思った。&lt;/p&gt;

&lt;h3 id=&#34;2012年の成功:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;2012年の成功&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;なぜアジャイル開発を行うのか？目的を明確化した。

&lt;ul&gt;
&lt;li&gt;「仕様変更に対するコストをアジャイルで削減すること」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;顧客を含め、プロジェクトメンバーへの教育を徹底した。&lt;/li&gt;
&lt;li&gt;プロジェクト管理（進捗、コスト、品質、変更）を明確化した。&lt;/li&gt;
&lt;li&gt;チケットの粒度は必ず8時間以下。大きければ分割する。&lt;/li&gt;
&lt;li&gt;朝会で必ずバーンダウンチャートを確認。&lt;/li&gt;
&lt;li&gt;変更を受け入れるための進捗には「ゆとり」を持たせて計画する。バッファ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ポイント:29d91c6d9de33ba41ab60dac9e5e82f1&#34;&gt;ポイント&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TDD はいきなりやれと言われても絶対できない。

&lt;ul&gt;
&lt;li&gt;レッド・グリーン・リファクタリングのリズムを徹底的に教育。&lt;/li&gt;
&lt;li&gt;教育にはペアプロが最適。アマチュアとベテランを組ませて、技術の伝播と平準化をはかる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;常時結合（CI）も教育した。

&lt;ul&gt;
&lt;li&gt;夜10時から朝5時に毎日走らせ、朝会で確認するようにした。→いい加減なコミットがなくなった。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;仕様の確認方法と受け入れ方法をルール化しておく→スピードアップ

&lt;ul&gt;
&lt;li&gt;スプリントレビューのタイミングが基本&lt;/li&gt;
&lt;li&gt;仕様決定者全員が合意する時間を作る&lt;/li&gt;
&lt;li&gt;約4時間で用件説明、レビュー、操作確認を行う。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「アジャイルプロセスの適用」が目的ではない！&lt;/li&gt;
&lt;li&gt;アジャイルは楽ではない。

&lt;ul&gt;
&lt;li&gt;残業を認めず、時間内にやり遂げることが必要。&lt;/li&gt;
&lt;li&gt;「3ヶ月は続けられない」というアンケート結果が多かった。ずっとアジャイルは無理という印象。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>書評: How to Change the World 〜チェンジ・マネジメント3.0〜</title>
      <link>http://1000k.github.io/2013/07/08/book-review-how-to-change-the-world/</link>
      <pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/07/08/book-review-how-to-change-the-world/</guid>
      <description>&lt;div class=&#34;amazlet-box&#34; style=&#34;margin-bottom:0px;&#34;&gt;&lt;div class=&#34;amazlet-image&#34; style=&#34;float:left;margin:0px 12px 1px 0px;&#34;&gt;&lt;a href=&#34;http://tatsu-zine.com/books/howtochangetheworld&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatsu-zine.com/images/books/38/cover_s.jpg&#34; alt=&#34;How to Change the World  〜チェンジ・マネジメント3.0〜&#34; title=&#34;How to Change the World  〜チェンジ・マネジメント3.0〜&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-info&#34; style=&#34;line-height:120%;margin-bottom:10px&#34;&gt;&lt;div class=&#34;amazlet-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://tatsu-zine.com/books/howtochangetheworld&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;How to Change the World  〜チェンジ・マネジメント3.0〜【電子書籍】&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-detail&#34;&gt;Jurgen Appelo, 前川哲次(翻訳), 川口恭伸(翻訳), 吉羽龍太郎(翻訳)&lt;br /&gt;アギレルゴコンサルティング&lt;br /&gt;発行日: 2012-07-13&lt;br /&gt;対応フォーマット: EPUB, PDF&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-sub-info&#34; style=&#34;float:left;&#34;&gt;&lt;div class=&#34;amazlet-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://tatsu-zine.com/books/howtochangetheworld&#34; name=&#34;amazletlink&#34; target=&#34;_blank&#34;&gt;詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;amazlet-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;読みました。エネルギーを頂きました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1章がちょうど1時間程度でサクサク読める。&lt;/li&gt;
&lt;li&gt;全体でも半日程度あれば読み終えられます。&lt;/li&gt;
&lt;li&gt;ADKAR (Ability, Desire, Knowledge, Awareness, Reinforcement) モデルは初めて知りました。変化を達成するためのフェーズとアクションを理解する上で役立ちました。&lt;/li&gt;
&lt;li&gt;「なぜ変化を起こそうとしても失敗するのか」に対する考察には説得力があります。&lt;/li&gt;
&lt;li&gt;具体的なアクションの例に乏しい (環境によって違いすぎるので提案できない) 項目もあるが、その状況を打破するために考えるべきヒントは必ず書かれています。&lt;/li&gt;
&lt;li&gt;第4章では変化が伝播していくフェーズと、フェーズ毎の攻略法が書かれていますが、これも一人だけで経験するのは難しいノウハウです。非常に参考になります。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;500円という値段に見合わないほど、数多くのヒントが凝縮された書籍です。筆者の失敗と反省から出た考察は普遍的でありながら実際性を伴っており、改善を机上の空論に終わらせないためのエネルギーを持っています。&lt;/p&gt;

&lt;p&gt;この本はこんな人にお勧めです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;会社の働き方を改善させたい人&lt;/li&gt;
&lt;li&gt;改善させたいがやり方がわからない人&lt;/li&gt;
&lt;li&gt;改善に何度も失敗している人&lt;/li&gt;
&lt;li&gt;改善を働きかけているが上手くいかず、心が折れそうになっている人&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちょうど私もガチガチの縦割り組織に Scrum の普及させようとしていますが、この本に結構励まされました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git ワークフロー</title>
      <link>http://1000k.github.io/2013/04/14/git-workflow/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/04/14/git-workflow/</guid>
      <description>

&lt;p&gt;実際のプロジェクトを git で運用する時のよくある流れをまとめました。&lt;/p&gt;

&lt;h2 id=&#34;前準備:c200c94cf5af25837ca230fae46d8045&#34;&gt;前準備&lt;/h2&gt;

&lt;h3 id=&#34;git-push-コマンドのデフォルトの挙動を変更する:c200c94cf5af25837ca230fae46d8045&#34;&gt;git push コマンドのデフォルトの挙動を変更する&lt;/h3&gt;

&lt;p&gt;git push コマンドのデフォルトの挙動では、引数を指定しないとローカルにある全てのブランチを push してしまいます。そのため、リモートとローカルに同名のブランチがある場合、リモートブランチを同名のローカルブランチで意図せず上書きしてしまう危険があります。&lt;/p&gt;

&lt;p&gt;そこで、引数なしの git push を実行した時は、現在編集中のブランチのみ push するようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config  --global push.default current
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;新しいブランチを作成して作業する:c200c94cf5af25837ca230fae46d8045&#34;&gt;新しいブランチを作成して作業する&lt;/h2&gt;

&lt;p&gt;以下の流れを行う時のコマンドです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mojamoja リポジトリに新しいブランチを作成する&lt;/li&gt;
&lt;li&gt;変更をリモートに push する&lt;/li&gt;
&lt;li&gt;変更点を master ブランチにマージする&lt;/li&gt;
&lt;li&gt;変更したバージョンをタグにする&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;# mojamoja リポジトリをローカルに clone する
$ git clone git@bitbucket.org:1000k/mojamoja
$ cd mojamoja

# 現在ローカルにあるブランチを確認する
$ git branch -l

# 作業用ブランチ (例として &#39;feature-branch&#39; という名前) を作成する
$ git branch feature-branch

# 作業用ブランチに切り替える
$ git checkout feature-branch

# 編集
$ vim ...
$ vim ...

# 変更のあったファイルを確認する
$ git status

# 変更したファイルを全てコミット対象に入れる
# 個別に登録したい場合は &amp;quot;git add {ファイルパス}&amp;quot;
$ git add -A

$ git commit -m &amp;quot;Foo クラスを作成。&amp;quot;

# 変更したファイルをリモートにプッシュする
$ git push

# master ブランチにマージする
$ git checkout master
$ git merge feature-branch
$ git push

# 既存のタグを確認
$ git tag -l

# ローカルにタグを作成する
$ git tag 0.0.1 -m &amp;quot;First tag&amp;quot;

# リモートに push する
$ git push --tags

# 使わなくなったローカルブランチを削除する
$ git branch -d feature-branch

# 使わなくなったリモートブランチを削除する
# ブランチ名の前に &amp;quot;:&amp;quot; を付け忘れると動かないので注意
$ git push origin :feature-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ローカルをリモートの状態に合わせる:c200c94cf5af25837ca230fae46d8045&#34;&gt;ローカルをリモートの状態に合わせる&lt;/h2&gt;

&lt;p&gt;異なるマシンから同じリモートブランチに変更を加えると、それぞれのマシン間で差異が出てしまいます。以下の手順で、ローカルのブランチをリモートにあるブランチと同期させることが可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# リモートの最新のデータを取得する
$ git fetch origin master

# ローカルのバージョンの向き先を最新に変える
$ git reset --hard FETCH_HEAD

# ローカルの管理外ファイルを消す
$ git clean -df
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでリモートとローカルでファイルの中身が同一になりました。&lt;/p&gt;

&lt;h2 id=&#34;リモートブランチをローカルで編集する:c200c94cf5af25837ca230fae46d8045&#34;&gt;リモートブランチをローカルで編集する&lt;/h2&gt;

&lt;p&gt;リモートにのみ 0.2.0 ブランチがあり、ローカルにはまだ無い場合、以下のコマンドでローカルにコピーすることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ローカルにあるブランチの一覧を確認する
$ git branch -r

# ローカルの 0.2.0 ブランチにリモートの 0.2.0 をチェックアウトする
$ git checkout -b 0.2.0 origin/0.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;間違ったコミットを取り消す:c200c94cf5af25837ca230fae46d8045&#34;&gt;間違ったコミットを取り消す&lt;/h2&gt;

&lt;p&gt;2つの考え方があるので注意。&lt;/p&gt;

&lt;p&gt;ここは git の内部構造を理解していないと飲み込めないかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/matsukaz/git-17499005&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.slideshare.net/matsukaz/git-17499005&#39;, &#39;いつやるの？Git入門&#39;]);&#34; &gt;いつやるの？Git入門&lt;/a&gt; が簡潔に内部構造を説明しているので、目を通すことをオススメします。&lt;/p&gt;

&lt;h3 id=&#34;commit-8211-amend:c200c94cf5af25837ca230fae46d8045&#34;&gt;commit &amp;#8211;amend&lt;/h3&gt;

&lt;p&gt;後から前回のコミットに追加して変更をするやり方です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# わざと間違ったコミットをする
$ git commit -m &amp;quot;Failure commit&amp;quot;

# これまでのコミットの一覧を確認する
$ git log

# さっきコミットし忘れたファイルをステージングする
$ git add foo.php

# 先ほどコミットした部分と合わせて新たなコミットを行う
git commit --amend -m &amp;quot;Successful commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにより、1回目の間違ったコミットは無効化され、2回目のコミットが利用されます。&lt;/p&gt;

&lt;h3 id=&#34;git-reset:c200c94cf5af25837ca230fae46d8045&#34;&gt;git reset&lt;/h3&gt;

&lt;p&gt;前回のコミットそのものを取り消す (無かったことにする) コマンドです。&lt;/p&gt;

&lt;p&gt;コミットしたファイルを残すか消すかで、オプションの値を変える必要があります。&lt;/p&gt;

&lt;p&gt;コミットだけを取り消して、変更したファイルはそのままで、1つ手前の状態に戻すには、&lt;code&gt;--soft&lt;/code&gt; オプションを付けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --soft HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コミットを取り消し、ワークディレクトリの中身も1つ前の状態に置き換える (= 変更も全て元に戻る) には、&lt;code&gt;--hard&lt;/code&gt; オプションを付けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --hard HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:c200c94cf5af25837ca230fae46d8045&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nayutaya/20090519/1242701594&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://d.hatena.ne.jp/nayutaya/20090519/1242701594&#39;, &#39;gitのリモートブランチを使って作業を行う流れのメモ &amp;#8211; 那由多屋 開発日誌&#39;]);&#34; &gt;gitのリモートブランチを使って作業を行う流れのメモ &amp;#8211; 那由多屋 開発日誌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/948354/git-push-current-branch&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://stackoverflow.com/questions/948354/git-push-current-branch&#39;, &#39;git push current branch &amp;#8211; Stack Overflow&#39;]);&#34; &gt;git push current branch &amp;#8211; Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://transitive.info/article/git/command/tag/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://transitive.info/article/git/command/tag/&#39;, &#39;transitive.info &amp;#8211; git tag 使い方&#39;]);&#34; &gt;transitive.info &amp;#8211; git tag 使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/items/e082d64f3f8b424e9b7d&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://qiita.com/items/e082d64f3f8b424e9b7d&#39;, &#39;fetch と pullの違い #git &amp;#8211; Qiita&#39;]);&#34; &gt;fetch と pullの違い #git &amp;#8211; Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dqn.sakusakutto.jp/2012/11/git_pull.html&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://dqn.sakusakutto.jp/2012/11/git_pull.html&#39;, &#39;Git pullを使うべきでない３つの理由 &amp;#8211; DQNEO起業日記&#39;]);&#34; &gt;Git pullを使うべきでない３つの理由 &amp;#8211; DQNEO起業日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/mrgoofy33/20100910/1284069468&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://d.hatena.ne.jp/mrgoofy33/20100910/1284069468&#39;, &#39;git commitをやり直しする＆取り消しする(「get commit &amp;#8211;amend」と「git reset」) &amp;#8211; hogehoge foobar Blog Style5&#39;]);&#34; &gt;git commitをやり直しする＆取り消しする(「get commit &amp;#8211;amend」と「git reset」) &amp;#8211; hogehoge foobar Blog Style5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/matsukaz/git-17499005&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.slideshare.net/matsukaz/git-17499005&#39;, &#39;いつやるの？Git入門&#39;]);&#34; &gt;いつやるの？Git入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Netcat でサーバー間の疎通を確認する方法</title>
      <link>http://1000k.github.io/2013/04/10/how-to-check-communication-between-the-server-using-netcat/</link>
      <pubDate>Wed, 10 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/04/10/how-to-check-communication-between-the-server-using-netcat/</guid>
      <description>

&lt;p&gt;サーバー間のネットワークが繋がっているか確認したい場合、Netcat (nc) コマンドが便利です。&lt;/p&gt;

&lt;h2 id=&#34;使うコマンド:eab99a5c8d7d52c5c56e0b2e7fa8bbba&#34;&gt;使うコマンド&lt;/h2&gt;

&lt;p&gt;受信側では &amp;#8220;-l&amp;#8221; (Listen mode) オプションを使い、待受状態にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nc -l {listenするポート番号}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;送信側は &amp;#8220;-z&amp;#8221; (Zero-I/O mode) オプションを使い、指定したポートに接続できるかテストします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nc -v -z {受信側のIP} {受信側のポート番号}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;例:eab99a5c8d7d52c5c56e0b2e7fa8bbba&#34;&gt;例&lt;/h2&gt;

&lt;p&gt;host001 のポート 4949 に、host002 から疎通できるかどうかテストするには、下記のようなコマンドを叩きます。&lt;/p&gt;

&lt;h3 id=&#34;1-受信側のポートを-listen-する:eab99a5c8d7d52c5c56e0b2e7fa8bbba&#34;&gt;1. 受信側のポートを listen する&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[host001]$ nc -v -k -l 4949
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;#8220;-v&amp;#8221; でより多くのメッセージを出力し、&amp;#8221;-k&amp;#8221; でコネクションを永続化することができます。（&amp;#8221;-k&amp;#8221; を指定しないと1回受信するたびに nc が終了します）&lt;/p&gt;

&lt;h3 id=&#34;2-送信側から接続できるか確かめる:eab99a5c8d7d52c5c56e0b2e7fa8bbba&#34;&gt;2. 送信側から接続できるか確かめる&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[host002]$ nc -v -z host001 4949
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接続 OK の場合、以下のようなメッセージが出力されます。&lt;/p&gt;

&lt;p&gt;送信側&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Connection to host001 4949 port [tcp/munin] succeeded!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;受信側&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Connection from host002 port 4949 [tcp/munin] accepted
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:eab99a5c8d7d52c5c56e0b2e7fa8bbba&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.techrepublic.com/article/learn-the-many-uses-of-netcat/5689982&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.techrepublic.com/article/learn-the-many-uses-of-netcat/5689982&#39;, &#39;Learn the many uses of netcat | TechRepublic&#39;]);&#34; &gt;Learn the many uses of netcat | TechRepublic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.usupi.org/sysad/190.html&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.usupi.org/sysad/190.html&#39;, &#39;Netcat でネットワークをもう少し活用する &amp;#8211; いますぐ実践! Linuxシステム管理 / Vol.190&#39;]);&#34; &gt;Netcat でネットワークをもう少し活用する &amp;#8211; いますぐ実践! Linuxシステム管理 / Vol.190&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redis 2.6 のインストール手順</title>
      <link>http://1000k.github.io/2013/04/03/installing-redis-2-6/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://1000k.github.io/2013/04/03/installing-redis-2-6/</guid>
      <description>

&lt;p&gt;なぜか&lt;a href=&#34;http://redis.io/download&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://redis.io/download&#39;, &#39;公式サイトのインストール手順&#39;]);&#34; &gt;公式サイトのインストール手順&lt;/a&gt;はコンパイルまでで終わっているので、完全な手順をメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;ダウンロード:d385bf451ffc60def1f51e177c3e1b7c&#34;&gt;ダウンロード&lt;/h2&gt;

&lt;p&gt;最新のソースを &lt;a href=&#34;http://redis.io/download&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://redis.io/download&#39;, &#39;Download – Redis&#39;]);&#34; &gt;Download – Redis&lt;/a&gt; からダウンロードします。&lt;/p&gt;

&lt;p&gt;以下、執筆時のバージョン (2.6.12) で話を進めます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://redis.googlecode.com/files/redis-2.6.12.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンパイル:d385bf451ffc60def1f51e177c3e1b7c&#34;&gt;コンパイル&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ tar xzf redis-2.6.12.tar.gz
$ cd redis-2.6.12
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※32bit版OSの場合、そのまま make するとエラーが出るので、以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export CFLAGS=-march=i686
$ make distclean
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://www.eschrade.com/page/undefined-reference-to-__sync_add_and_fetch_4/&#34; onclick=&#34;_gaq.push([&#39;_trackEvent&#39;, &#39;outbound-article&#39;, &#39;http://www.eschrade.com/page/undefined-reference-to-__sync_add_and_fetch_4/&#39;, &#39;undefined reference to `__sync_add_and_fetch_4′ when compiling Redis | ESchrade&#39;]);&#34; &gt;undefined reference to `__sync_add_and_fetch_4′ when compiling Redis | ESchrade&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;インストール:d385bf451ffc60def1f51e177c3e1b7c&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;インストール後は対話式インストーラーを使って、各種ファイルを設置します。&lt;/p&gt;

&lt;p&gt;基本的にはそのまま Enter でOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo make install
$ cd utils
$ sudo ./install_server.sh

Welcome to the redis service installer
This script will help you easily set up a running redis server


Please select the redis port for this instance: [6379]
Selecting default: 6379
Please select the redis config file name [/etc/redis/6379.conf]
Selected default - /etc/redis/6379.conf
Please select the redis log file name [/var/log/redis_6379.log]
Selected default - /var/log/redis_6379.log
Please select the data directory for this instance [/var/lib/redis/6379]
Selected default - /var/lib/redis/6379
Please select the redis executable path [/usr/local/bin/redis-server]
s#^port [0-9]{4}$#port 6379#;s#^logfile .+$#logfile /var/log/redis_6379.log#;s#^dir .+$#dir /var/lib/redis/6379#;s#^pidfile .+$#pidfile /var/run/redis_6379.pid#;s#^daemonize no$#daemonize yes#;
Copied /tmp/6379.conf =&amp;gt; /etc/init.d/redis_6379
Installing service...
Installation successful!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;起動スクリプトの修正:d385bf451ffc60def1f51e177c3e1b7c&#34;&gt;起動スクリプトの修正&lt;/h2&gt;

&lt;p&gt;ここまでで &lt;strong&gt;/etc/init.d/redis_6379&lt;/strong&gt; に起動スクリプトが追加されますが、なぜか1行目のコメント行がバグっていて変数がすべてコメントアウトされています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#/bin/sh\n #Configurations injected by install_server below....\n\n EXEC=/usr/local/bin/redis-server\n CLIEXEC=/usr/local/bin/redis-cli\n PIDFILE=/var/run/redis_6379.pid\n CONF=&amp;quot;/etc/redis/6379.conf&amp;quot;\n\n REDISPORT=&amp;quot;6379&amp;quot;\n\n ###############\n\n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、1行目の「\n」をすべて改行コードに置換します。修正後は以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!sh
#/bin/sh
#Configurations injected by install_server below....

EXEC=/usr/local/bin/redis-server
CLIEXEC=/usr/local/bin/redis-cli
PIDFILE=/var/run/redis_6379.pid
CONF=&amp;quot;/etc/redis/6379.conf&amp;quot;
REDISPORT=&amp;quot;6379&amp;quot;
###############
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vimなら「[ESC]キー」-&amp;gt; 「:%s/&amp;#92;n/^M/g」を入力すれば一発です。（改行文字「^M」は「Ctrl+V Ctrl+M」で入力可能）&lt;/p&gt;

&lt;h2 id=&#34;起動テスト:d385bf451ffc60def1f51e177c3e1b7c&#34;&gt;起動テスト&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/redis_6379 start
$ ps -ef | grep redis
$ sudo /etc/init.d/redis_6379 stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で完了です。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>